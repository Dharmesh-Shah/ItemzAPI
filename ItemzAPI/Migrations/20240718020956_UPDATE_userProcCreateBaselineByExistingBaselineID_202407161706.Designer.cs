// <auto-generated />
using System;
using ItemzApp.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.SqlServer.Types;

#nullable disable

namespace ItemzApp.API.Migrations
{
    [DbContext(typeof(ItemzContext))]
    [Migration("20240718020956_UPDATE_userProcCreateBaselineByExistingBaselineID_202407161706")]
    partial class UPDATE_userProcCreateBaselineByExistingBaselineID_202407161706
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ItemzApp.API.Entities.Baseline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("Baseline");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.BaselineItemz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.Property<Guid>("IgnoreMeBaselineItemzTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemzId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Priority")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Severity")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Status")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("isIncluded")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("BaselineItemz");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.BaselineItemzHierarchy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<SqlHierarchyId?>("BaselineItemzHierarchyId")
                        .HasColumnType("hierarchyid");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<SqlHierarchyId?>("SourceItemzHierarchyId")
                        .HasColumnType("hierarchyid");

                    b.HasKey("Id");

                    b.ToTable("BaselineItemzHierarchy");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.BaselineItemzJoinItemzTrace", b =>
                {
                    b.Property<Guid>("BaselineFromItemzId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaselineToItemzId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaselineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BaselineFromItemzId", "BaselineToItemzId");

                    b.HasIndex("BaselineToItemzId");

                    b.ToTable("BaselineItemzJoinItemzTrace");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.BaselineItemzType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("BaselineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemzTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Status")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineId");

                    b.ToTable("BaselineItemzType");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.BaselineItemzTypeJoinBaselineItemz", b =>
                {
                    b.Property<Guid>("BaselineItemzTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaselineItemzId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BaselineItemzTypeId", "BaselineItemzId");

                    b.HasIndex("BaselineItemzId");

                    b.ToTable("BaselineItemzTypeJoinBaselineItemz");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.Itemz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Priority")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasDefaultValue("Medium");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Itemzs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9153a516-d69e-4364-b17e-03b87442e21c"),
                            CreatedBy = "User 1",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Requirements to be described here.",
                            Name = "Item 1",
                            Priority = "High",
                            Severity = "Medium",
                            Status = "New"
                        },
                        new
                        {
                            Id = new Guid("5e76f8e8-d3e7-41db-b084-f64c107c6783"),
                            CreatedBy = "User 2",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Requirements to be described here.",
                            Name = "Item 2",
                            Priority = "Medium",
                            Severity = "Medium",
                            Status = "New"
                        },
                        new
                        {
                            Id = new Guid("885b8e56-ffe6-4bc9-82e2-ce23230991db"),
                            CreatedBy = "User 3",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Requirements to be described here.",
                            Name = "Item 3",
                            Priority = "Low",
                            Severity = "Medium",
                            Status = "New"
                        },
                        new
                        {
                            Id = new Guid("0850bc8a-84c4-4c52-8ab6-b06e7bc2195b"),
                            CreatedBy = "User 4",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Requirements to be described here.",
                            Name = "Item 4",
                            Priority = "Low",
                            Severity = "Medium",
                            Status = "New"
                        },
                        new
                        {
                            Id = new Guid("4adde56d-8081-45ea-bd37-5c830b63873b"),
                            CreatedBy = "User 5",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Requirements to be described here.",
                            Name = "Item 5",
                            Priority = "Low",
                            Severity = "Medium",
                            Status = "New"
                        });
                });

            modelBuilder.Entity("ItemzApp.API.Entities.ItemzChangeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeEvent")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ItemzId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemzId");

                    b.ToTable("ItemzChangeHistory");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.ItemzHierarchy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<SqlHierarchyId?>("ItemzHierarchyId")
                        .HasColumnType("hierarchyid");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ItemzHierarchy");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18b014c8-6c31-408f-b8f3-3a4f342abbb1"),
                            ItemzHierarchyId = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/"),
                            RecordType = "Repository"
                        },
                        new
                        {
                            Id = new Guid("42f62a6c-fcda-4dac-a06c-406ac1c17770"),
                            ItemzHierarchyId = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/1/"),
                            RecordType = "Project"
                        },
                        new
                        {
                            Id = new Guid("473fe535-1420-42cf-8a40-224388b8df24"),
                            ItemzHierarchyId = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/1/1/"),
                            RecordType = "ItemzType"
                        },
                        new
                        {
                            Id = new Guid("611639db-577a-48f6-9b08-f6aef477368f"),
                            ItemzHierarchyId = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/1/2/"),
                            RecordType = "ItemzType"
                        },
                        new
                        {
                            Id = new Guid("9153a516-d69e-4364-b17e-03b87442e21c"),
                            ItemzHierarchyId = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/1/2/1/"),
                            RecordType = "Itemz"
                        },
                        new
                        {
                            Id = new Guid("b69cf0d7-70ad-4f73-aa4a-8daad5181e1e"),
                            ItemzHierarchyId = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/2/"),
                            RecordType = "Project"
                        },
                        new
                        {
                            Id = new Guid("1a069648-6ad6-4c8a-be05-be747bdeb8da"),
                            ItemzHierarchyId = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/2/1/"),
                            RecordType = "ItemzType"
                        },
                        new
                        {
                            Id = new Guid("8414bf58-6331-4b3e-bbf0-f780950a337b"),
                            ItemzHierarchyId = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/2/2/"),
                            RecordType = "ItemzType"
                        },
                        new
                        {
                            Id = new Guid("5e76f8e8-d3e7-41db-b084-f64c107c6783"),
                            ItemzHierarchyId = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/2/2/1/"),
                            RecordType = "Itemz"
                        },
                        new
                        {
                            Id = new Guid("52ca1dfc-b187-47fc-a379-57af33404b34"),
                            ItemzHierarchyId = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/2/3/"),
                            RecordType = "ItemzType"
                        });
                });

            modelBuilder.Entity("ItemzApp.API.Entities.ItemzJoinItemzTrace", b =>
                {
                    b.Property<Guid>("FromItemzId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToItemzId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FromItemzId", "ToItemzId");

                    b.HasIndex("ToItemzId");

                    b.ToTable("ItemzJoinItemzTrace");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.ItemzType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ItemzTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("473fe535-1420-42cf-8a40-224388b8df24"),
                            CreatedBy = "User 1",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "This is Parking Lot system ItemzType",
                            IsSystem = true,
                            Name = "Parking Lot",
                            ProjectId = new Guid("42f62a6c-fcda-4dac-a06c-406ac1c17770"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("611639db-577a-48f6-9b08-f6aef477368f"),
                            CreatedBy = "User 1",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "This is ItemzType 1",
                            IsSystem = false,
                            Name = "ItemzType 1",
                            ProjectId = new Guid("42f62a6c-fcda-4dac-a06c-406ac1c17770"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("1a069648-6ad6-4c8a-be05-be747bdeb8da"),
                            CreatedBy = "User 1",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "This is Parking Lot system ItemzType",
                            IsSystem = true,
                            Name = "Parking Lot",
                            ProjectId = new Guid("b69cf0d7-70ad-4f73-aa4a-8daad5181e1e"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("8414bf58-6331-4b3e-bbf0-f780950a337b"),
                            CreatedBy = "User 1",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "This is ItemzType 2",
                            IsSystem = false,
                            Name = "ItemzType 2",
                            ProjectId = new Guid("b69cf0d7-70ad-4f73-aa4a-8daad5181e1e"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("52ca1dfc-b187-47fc-a379-57af33404b34"),
                            CreatedBy = "User 1",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Used for testing that ItemzType Name remains unique within a given Project",
                            IsSystem = false,
                            Name = "TESTING - Unique ItemzType Name",
                            ProjectId = new Guid("b69cf0d7-70ad-4f73-aa4a-8daad5181e1e"),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("ItemzApp.API.Entities.ItemzTypeJoinItemz", b =>
                {
                    b.Property<Guid>("ItemzTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemzId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemzTypeId", "ItemzId");

                    b.HasIndex("ItemzId");

                    b.ToTable("ItemzTypeJoinItemz");

                    b.HasData(
                        new
                        {
                            ItemzTypeId = new Guid("611639db-577a-48f6-9b08-f6aef477368f"),
                            ItemzId = new Guid("9153a516-d69e-4364-b17e-03b87442e21c")
                        },
                        new
                        {
                            ItemzTypeId = new Guid("8414bf58-6331-4b3e-bbf0-f780950a337b"),
                            ItemzId = new Guid("5e76f8e8-d3e7-41db-b084-f64c107c6783")
                        });
                });

            modelBuilder.Entity("ItemzApp.API.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42f62a6c-fcda-4dac-a06c-406ac1c17770"),
                            CreatedBy = "User 1",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "This is Project 1",
                            Name = "Project 1",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("b69cf0d7-70ad-4f73-aa4a-8daad5181e1e"),
                            CreatedBy = "User 1",
                            CreatedDate = new DateTimeOffset(new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "This is Project 2",
                            Name = "Project 2",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("ItemzApp.API.Entities.Baseline", b =>
                {
                    b.HasOne("ItemzApp.API.Entities.Project", "Project")
                        .WithMany("Baseline")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.BaselineItemzJoinItemzTrace", b =>
                {
                    b.HasOne("ItemzApp.API.Entities.BaselineItemz", "BaselineFromItemz")
                        .WithMany()
                        .HasForeignKey("BaselineFromItemzId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ItemzApp.API.Entities.BaselineItemz", "BaselineToItemz")
                        .WithMany()
                        .HasForeignKey("BaselineToItemzId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaselineFromItemz");

                    b.Navigation("BaselineToItemz");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.BaselineItemzType", b =>
                {
                    b.HasOne("ItemzApp.API.Entities.Baseline", "Baseline")
                        .WithMany("BaselineItemzTypes")
                        .HasForeignKey("BaselineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baseline");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.BaselineItemzTypeJoinBaselineItemz", b =>
                {
                    b.HasOne("ItemzApp.API.Entities.BaselineItemz", "BaselineItemz")
                        .WithMany("BaselineItemzTypeJoinBaselineItemz")
                        .HasForeignKey("BaselineItemzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemzApp.API.Entities.BaselineItemzType", "BaselineItemzType")
                        .WithMany("BaselineItemzTypeJoinBaselineItemz")
                        .HasForeignKey("BaselineItemzTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaselineItemz");

                    b.Navigation("BaselineItemzType");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.ItemzChangeHistory", b =>
                {
                    b.HasOne("ItemzApp.API.Entities.Itemz", "Itemz")
                        .WithMany()
                        .HasForeignKey("ItemzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itemz");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.ItemzJoinItemzTrace", b =>
                {
                    b.HasOne("ItemzApp.API.Entities.Itemz", "FromItemz")
                        .WithMany()
                        .HasForeignKey("FromItemzId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ItemzApp.API.Entities.Itemz", "ToItemz")
                        .WithMany()
                        .HasForeignKey("ToItemzId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromItemz");

                    b.Navigation("ToItemz");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.ItemzType", b =>
                {
                    b.HasOne("ItemzApp.API.Entities.Project", "Project")
                        .WithMany("ItemzTypes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.ItemzTypeJoinItemz", b =>
                {
                    b.HasOne("ItemzApp.API.Entities.Itemz", "Itemz")
                        .WithMany("ItemzTypeJoinItemz")
                        .HasForeignKey("ItemzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemzApp.API.Entities.ItemzType", "ItemzType")
                        .WithMany("ItemzTypeJoinItemz")
                        .HasForeignKey("ItemzTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itemz");

                    b.Navigation("ItemzType");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.Baseline", b =>
                {
                    b.Navigation("BaselineItemzTypes");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.BaselineItemz", b =>
                {
                    b.Navigation("BaselineItemzTypeJoinBaselineItemz");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.BaselineItemzType", b =>
                {
                    b.Navigation("BaselineItemzTypeJoinBaselineItemz");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.Itemz", b =>
                {
                    b.Navigation("ItemzTypeJoinItemz");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.ItemzType", b =>
                {
                    b.Navigation("ItemzTypeJoinItemz");
                });

            modelBuilder.Entity("ItemzApp.API.Entities.Project", b =>
                {
                    b.Navigation("Baseline");

                    b.Navigation("ItemzTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
