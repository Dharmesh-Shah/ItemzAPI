<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ItemzApp.API</name>
    </assembly>
    <members>
        <member name="M:ItemzApp.API.BusinessRules.ItemzType.ItemzTypeRules.HasItemzTypeWithNameAsync(System.Guid,System.String)">
            <summary>
            Use this method to check if the ItemzType with given name already exists. In General, 
            This check shall be performed before inserting or updating ItemzType.
            </summary>
            <param name="projectId">Project Id in Guid form in which we are checking for ItemzType with a specific name</param>
            <param name="itemzTypeName">Name of the ItemzType to be checked for uniqueness</param>
            <returns>true if ItemzType with ItemzTypeName found otherwise false</returns>
        </member>
        <member name="M:ItemzApp.API.BusinessRules.ItemzType.ItemzTypeRules.UniqueItemzTypeNameRuleAsync(System.Guid,System.String,System.String)">
            <summary>
            Used for verifying if project contains itemzType with the 
            same name as the one used for inserting or updating
            </summary>
            <param name="projectId">Project Id in Guid form in which we are checking for ItemzType with a specific name</param>
            <param name="targetItemzTypeName">New or updated itemzType name</param>
            <param name="sourceItemzTypeName">Old itemzType name. No need to pass this for checking rule against creating itemzType action</param>
            <returns>true if itemzType with same name exist in the repository otherwise false</returns>
        </member>
        <member name="M:ItemzApp.API.BusinessRules.Project.ProjectRules.HasProjectWithNameAsync(System.String)">
            <summary>
            Use this method to check if the project with given name already exists. In General, 
            This check shall be performed before inserting or updating project.
            </summary>
            <param name="projectName">Name of the project to be checked for uniqueness</param>
            <returns>true if project with projectName found otherwise false</returns>
        </member>
        <member name="M:ItemzApp.API.BusinessRules.Project.ProjectRules.UniqueProjectNameRuleAsync(System.String,System.String)">
            <summary>
            Used for verifying if repository contains project with the 
            same name as the one used for inserting or updating
            </summary>
            <param name="targetProjectName">New or updated project name</param>
            <param name="sourceProjectName">Old project name. No need to pass this for checking rule against creating project action</param>
            <returns>true if project with same name exist in the repository otherwise false</returns>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzChangeHistoryController.GetItemzChangeHistoryAsync(System.Guid)">
            <summary>
            Get collection of Itemz Change History by Itemz ID (represented by a GUID)
            </summary>
            <param name="ItemzId">GUID representing an unique ID of the Itemz that you want to get change history for</param>
            <returns>A collection of Itemz Change History records based on provided Itemz ID (GUID) </returns>
            <response code="200">Returns the requested Itemz Change History Records</response>
            <response code="404">Requested Itemz and/or it's change history records not found</response>
            
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzChangeHistoryController.DeleteItemzChangeHistoryAsync(ItemzApp.API.Models.DeleteItemzChangeHistoryDTO)">
            <summary>
            Deleting ItemzChangeHistory for a given ItemzID upto provided Date and Time.
            </summary>
            <param name="deleteItemzChangeHistoryDTO">Provide ItemzID representated in GUID form along with Upto Date Time indicating till the time Itemz Change History data has to be deleted.</param>
            <returns>Status code 204 is returned without any content indicating that action to delete Itemz Change History was successful. Either it found older records to be deleted or it did not find any records to be deleted.</returns>
            <response code="200">Returns number of Itemz Change History records that were deleted</response>
            <response code="404">Itemz based on itemzId was not found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzCollectionController.GetItemzCollectionAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets collection of Itemzs without any Pagination
            </summary>
            <param name="ids">Array of Itemz Id (in GUID form) for which details has to be returned to the caller</param>
            <returns>Collection of Itemz that are requested via Array of Itemz Id</returns>
            <response code="200">Collection of Itemzs property details based on Itemz Ids that were passed in as parameter</response>
            <response code="500">Bad Request - Itemz Ids should be passed in as parameter</response>
            <response code="404">No Itemzs were found based on provided list of Itemz Ids</response>
            <remarks>
            Sample request (this request will get itemz by Ids) \
            GET api/ItemzCollection/(9153a516-d69e-4364-b17e-03b87442e21c,5e76f8e8-d3e7-41db-b084-f64c107c6783) 
            </remarks>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzCollectionController.CreateItemzCollectionAsync(System.Collections.Generic.IEnumerable{ItemzApp.API.Models.CreateItemzDTO})">
            <summary>
            Used for creating new multiple Itemz record in the database
            </summary>
            <param name="itemzCollection">Array of CreateItemzDTO Used for populating information in the newly created itemzs in the database</param>
            <returns>Collection of Newly created Itemzs property details</returns>
            <response code="201">Collection of Newly created Itemzs property details</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzCollectionController.GetItemzOptions">
            <summary>
            Get list of supported HTTP Options for the ItemzCollection controller.
            </summary>
            <returns>Custom response header with key as "Allow" and value as different HTTP options that are allowed</returns>
            <response code="200">Custom response header with key as "Allow" and value as different HTTP options that are allowed</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzsController.GetItemzAsync(System.Guid)">
            <summary>
            Get an Itemz by ID (represented by a GUID)
            </summary>
            <param name="ItemzId">GUID representing an unique ID of the Itemz that you want to get</param>
            <returns>A single Itemz record based on provided ID (GUID) </returns>
            <response code="200">Returns the requested Itemz</response>
            <response code="404">Requested Itemz not found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzsController.GetItemzs(ItemzApp.API.ResourceParameters.ItemzResourceParameter)">
            <summary>
            Gets collection of Itemzs
            </summary>
            <param name="itemzResourceParameter">Pass in information related to Pagination and Sorting Order via this parameter</param>
            <returns>Collection of Itemz based on expectated pagination and sorting order.</returns>
            <response code="200">Returns collection of Itemzs based on pagination</response>
            <response code="404">No Itemzs were found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzsController.CreateItemzAsync(ItemzApp.API.Models.CreateItemzDTO)">
            <summary>
            Used for creating new Itemz record in the database
            </summary>
            <param name="createItemzDTO">Used for populating information in the newly created itemz in the database</param>
            <returns>Newly created Itemz property details</returns>
            <response code="201">Returns newly created itemzs property details</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzsController.UpdateItemzPutAsync(System.Guid,ItemzApp.API.Models.UpdateItemzDTO)">
            <summary>
            Updating exsting Itemz based on Itemz Id (GUID)
            </summary>
            <param name="itemzId">GUID representing an unique ID of the Itemz that you want to get</param>
            <param name="itemzToBeUpdated">required Itemz properties to be updated</param>
            <returns>No contents are returned but only Status 204 indicating that Item was updated successfully </returns>
            <response code="204">No content are returned but status of 204 indicated that item was successfully updated</response>
            <response code="404">Itemz based on itemzId was not found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzsController.UpdateItemzPatchAsync(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ItemzApp.API.Models.UpdateItemzDTO})">
            <summary>
            Partially updating a single **Itemz**
            </summary>
            <param name="itemzId">Id of the Itemz representated by a GUID.</param>
            <param name="itemzPatchDocument">The set of operations to apply to the Itemz via JsonPatchDocument</param>
            <returns>an ActionResult of type Itemz</returns>
            <response code="204">No content are returned but status of 204 indicated that itemz was successfully updated</response>
            <response code="404">Itemz based on itemzId was not found</response>
            <response code="422">Validation problems occured during analyzing validation rules for the JsonPatchDocument </response>
            <remarks> Sample request (this request updates an **Itemz's name**)   
            Documentation regarding JSON Patch can be found at 
            *[ASP.NET Core - JSON Patch Operations](https://docs.microsoft.com/en-us/aspnet/core/web-api/jsonpatch?view=aspnetcore-3.1#operations)* 
            
                PATCH /api/Itemzs/{id}  
                [  
                    {   
                        "op": "replace",   
                        "path": "/name",   
                        "value": "PATCH Updated Name field"  
                    }   
                ]
            </remarks>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzsController.DeleteItemzAsync(System.Guid)">
            <summary>
            Deleting a specific Itemz
            </summary>
            <param name="itemzId">GUID representing an unique ID of the Itemz that you want to get</param>
            <returns>Status code 204 is returned without any content indicating that deletion of the specified Itemz was successful</returns>
            <response code="404">Itemz based on itemzId was not found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzsController.GetItemzOptions">
            <summary>
            Get list of supported HTTP Options for the Itemz controller.
            </summary>
            <returns>Custom response header with key as "Allow" and value as different HTTP options that are allowed</returns>
            <response code="200">Custom response header with key as "Allow" and value as different HTTP options that are allowed</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypesController.GetItemzTypeAsync(System.Guid)">
            <summary>
            Get a ItemzType by ID (represented by a GUID)
            </summary>
            <param name="ItemzTypeId">GUID representing an unique ID of the ItemzType that you want to get</param>
            <returns>A single ItemzType record based on provided ID (GUID) </returns>
            <response code="200">Returns the requested ItemzType</response>
            <response code="404">Requested ItemzType not found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypesController.GetItemzTypesAsync">
            <summary>
            Gets collection of ItemzTypes
            </summary>
            <returns>Collection of ItemzTypes based on expectated sorting order.</returns>
            <response code="200">Returns collection of ItemzTypes based on sorting order</response>
            <response code="404">No ItemzTypes were found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypesController.CreateItemzTypeAsync(ItemzApp.API.Models.CreateItemzTypeDTO)">
            <summary>
            Used for creating new ItemzType record in the database
            </summary>
            <param name="createItemzTypeDTO">Used for populating information in the newly created ItemzType in the database</param>
            <returns>Newly created ItemzType property details</returns>
            <response code="201">Returns newly created ItemzTypes property details</response>
            <response code="404">Expected Project with ID was not found in the repository</response>
            <response code="409">ItemzType with the same name already exists in the target Project</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypesController.UpdateItemzTypePutAsync(System.Guid,ItemzApp.API.Models.UpdateItemzTypeDTO)">
            <summary>
            Updating exsting ItemzType based on ItemzType Id (GUID)
            </summary>
            <param name="ItemzTypeId">GUID representing an unique ID of the ItemzType that you want to get</param>
            <param name="ItemzTypeToBeUpdated">required ItemzType properties to be updated</param>
            <returns>No contents are returned but only Status 204 indicating that ItemzType was updated successfully </returns>
            <response code="204">No content are returned but status of 204 indicated that ItemzType was successfully updated</response>
            <response code="404">ItemzType based on ItemzTypeId was not found</response>
            <response code="405">ItemzType is not allowed to be modified. example, ItemzType is a System one.</response>
            <response code="409">ItemzType with the same name already exists in the target Project</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypesController.UpdateItemzTypePatchAsync(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ItemzApp.API.Models.UpdateItemzTypeDTO})">
            <summary>
            Partially updating a single **ItemzType**
            </summary>
            <param name="ItemzTypeId">Id of the ItemzType representated by a GUID.</param>
            <param name="ItemzTypePatchDocument">The set of operations to apply to the ItemzType via JsonPatchDocument</param>
            <returns>an ActionResult of type ItemzType</returns>
            <response code="204">No content are returned but status of 204 indicated that ItemzType was successfully updated</response>
            <response code="404">ItemzType based on ItemzTypeId was not found</response>
            <response code="405">ItemzType is not allowed to be modified. example, ItemzType is a System one.</response>
            <response code="409">ItemzType with the same name already exists in the target Project</response>
            <response code="422">Validation problems occured during analyzing validation rules for the JsonPatchDocument </response>
            <remarks> Sample request (this request updates an **ItemzType's name**)   
            Documentation regarding JSON Patch can be found at 
            *[ASP.NET Core - JSON Patch Operations](https://docs.microsoft.com/en-us/aspnet/core/web-api/jsonpatch?view=aspnetcore-3.1#operations)* 
            
                PATCH /api/ItemzTypes/{id}  
                [  
                    {   
                        "op": "replace",   
                        "path": "/name",   
                        "value": "PATCH Updated Name field"  
                    }   
                ]
            </remarks>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypesController.DeleteItemzTypeAsync(System.Guid)">
            <summary>
            Deleting a specific ItemzType
            </summary>
            <param name="ItemzTypeId">GUID representing an unique ID of the ItemzType that you want to get</param>
            <returns>Status code 204 is returned without any content indicating that deletion of the specified ItemzType was successful</returns>
            <response code="404">ItemzType based on ItemzTypeId was not found</response>
            <response code="405">ItemzType is not allowed to be deleted. example, ItemzType is a System one.</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypesController.GetItemzTypesOptions">
            <summary>
            Get list of supported HTTP Options for the ItemzTypes controller.
            </summary>
            <returns>Custom response header with key as "Allow" and value as different HTTP options that are allowed</returns>
            <response code="200">Custom response header with key as "Allow" and value as different HTTP options that are allowed</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypeItemzsController.GetItemzsByItemzTypeAsync(System.Guid,ItemzApp.API.ResourceParameters.ItemzResourceParameter)">
            <summary>
            Gets collection of Itemzs by ItemzType ID
            </summary>
            <param name="ItemzTypeId">ItemzType ID for which Itemz are queried</param>
            <param name="itemzResourceParameter">Pass in information related to Pagination and Sorting Order via this parameter</param>
            <returns>Collection of Itemz based on expectated pagination and sorting order.</returns>
            <response code="200">Returns collection of Itemzs based on pagination</response>
            <response code="404">No Itemzs were found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypeItemzsController.CheckItemzTypeItemzAssociationExistsAsync(System.Guid,System.Guid)">
            <summary>
            Check if specific ItemzType and Itemz association exists
            </summary>
            <param name="ItemzTypeId">Provide ItemzType Id</param>
            <param name="itemzId">Provide Itemz Id</param>
            <returns>GetItemzDTO for the Itemz that has specified ItemzType association</returns>
            <response code="200">Returns GetItemzDTO for the Itemz that has specified ItemzType association</response>
            <response code="404">No ItemzType and Itemzs association was found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypeItemzsController.CreateItemzCollectionByItemzTypeAsync(System.Guid,System.Collections.Generic.IEnumerable{ItemzApp.API.Models.CreateItemzDTO})">
            <summary>
            Used for creating new Itemz record in the database by ItemzType ID
            </summary>
            <param name="ItemzTypeId">ItemzType ID in Guid Form. New Itemzs will be associated with provided ItemzType Id</param>
            <param name="itemzCollection">Used for populating information in the newly created itemz in the database by ItemzType ID</param>
            <returns>Newly created Itemzs property details</returns>
            <response code="201">Returns newly created itemzs property details</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypeItemzsController.AssociateItemzToItemzTypeAsync(ItemzApp.API.Models.ItemzTypeItemzDTO)">
            <summary>
            Used for Associating Itemz to ItemzType 
            </summary>
            <param name="ItemzTypeItemzDTO">Used for Associating Itemz to ItemzType through ItemzId and ItemzTypeId Respectively</param>
            <returns>GetItemzDTO for the Itemz that has specified ItemzType association</returns>
            <response code="200">Itemz to ItemzType association was either found or added successfully</response>
            <response code="404">Either Itemz or ItemzType was not found </response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypeItemzsController.MoveItemzBetweenItemzTypesAsync(System.Guid,ItemzApp.API.Models.ItemzTypeItemzDTO)">
            <summary>
            Move Itemz from one ItemzType to another
            </summary>
            <param name="ItemzTypeId">GUID representing an unique ID of the Target ItemzType for moving Itemz into</param>
            <param name="targetItemzTypeItemzDTO">Details about target ItemzType and Itemz association</param>
            <returns>No contents are returned when expected ItemzType and Itemz association is established</returns>
            <response code="204">No content are returned but status of 204 indicated that expected ItemzType and Itemz association is established</response>
            <response code="404">Either Itemz or ItemzType was not found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypeItemzsController.DeleteItemzTypeAndItemzAssociationAsync(ItemzApp.API.Models.ItemzTypeItemzDTO)">
            <summary>
            Deleting a specific Itemz and ItemzType association. This will not delete Itemz or ItemzType from the database,
            instead it will only remove their association if found. 
            </summary>
            <returns>Status code 204 is returned without any content indicating that deletion of the specified ItemzType and Itemz association was successful</returns>
            <response code="404">ItemzType and Itemz association not found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ItemzTypeItemzsController.GetItemzTypeItemzOptions">
            <summary>
            Get list of supported HTTP Options for the Itemz controller.
            </summary>
            <returns>Custom response header with key as "Allow" and value as different HTTP options that are allowed</returns>
            <response code="200">Custom response header with key as "Allow" and value as different HTTP options that are allowed</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ONLYforTestingItemzController.CreateItemzAsync(ItemzApp.API.Entities.Itemz)">
            <summary>
            This option is designed only to be used for adding a new record while testing ItemzApp API.
            Used for creating new Itemz record in the database that also 
            accepts Itemz ID as part of input parameter
            </summary>
            <param name="itemz">Parameter that contains necessary properties for creating new Itemz in the database</param>
            <returns>Newly created Itemz property details</returns>
            <response code="201">Returns newly created itemzs property details</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ONLYforTestingItemzController.GetItemzOptions">
            <summary>
            Get list of supported HTTP Options for the ONLYforTestingItemz controller.
            </summary>
            <returns>Custom response header with key as "Allow" and value as different HTTP options that are allowed</returns>
            <response code="200">Custom response header with key as "Allow" and value as different HTTP options that are allowed</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ONLYforTestingItemzTypesController.CreateItemzTypeAsync(ItemzApp.API.Entities.ItemzType)">
            <summary>
            This option is designed only to be used for adding a new record while testing ItemzApp API.
            Used for creating new ItemzType record in the database that also 
            accepts ItemzType ID as part of input parameter
            </summary>
            <param name="itemzType">Parameter that contains necessary properties for creating new itemzType in the database</param>
            <returns>Newly created ItemzType property details</returns>
            <response code="201">Returns newly created itemzType's property details</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ONLYforTestingItemzTypesController.GetItemzTypesOptions">
            <summary>
            Get list of supported HTTP Options for the ONLYforTestingItemzTypes controller.
            </summary>
            <returns>Custom response header with key as "Allow" and value as different HTTP options that are allowed</returns>
            <response code="200">Custom response header with key as "Allow" and value as different HTTP options that are allowed</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ONLYforTestingProjectsController.CreateProjectAsync(ItemzApp.API.Entities.Project)">
            <summary>
            This option is designed only to be used for adding a new record while testing ItemzApp API.
            Used for creating new Project record in the database that also 
            accepts Project ID as part of input parameter
            </summary>
            <param name="project">Parameter that contains necessary properties for creating new project in the database</param>
            <returns>Newly created Project property details</returns>
            <response code="201">Returns newly created project's property details</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ONLYforTestingProjectsController.GetProjectsOptions">
            <summary>
            Get list of supported HTTP Options for the ONLYforTestingProjects controller.
            </summary>
            <returns>Custom response header with key as "Allow" and value as different HTTP options that are allowed</returns>
            <response code="200">Custom response header with key as "Allow" and value as different HTTP options that are allowed</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ProjectsController.GetProjectAsync(System.Guid)">
            <summary>
            Get a Project by ID (represented by a GUID)
            </summary>
            <param name="ProjectId">GUID representing an unique ID of the Project that you want to get</param>
            <returns>A single Project record based on provided ID (GUID) </returns>
            <response code="200">Returns the requested Project</response>
            <response code="404">Requested Project not found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ProjectsController.GetProjectsAsync">
            <summary>
            Gets collection of Projects
            </summary>
            <returns>Collection of Projects based on expectated sorting order.</returns>
            <response code="200">Returns collection of Projects based on sorting order</response>
            <response code="404">No Projects were found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ProjectsController.CreateProjectAsync(ItemzApp.API.Models.CreateProjectDTO)">
            <summary>
            Used for creating new Project record in the database
            </summary>
            <param name="createProjectDTO">Used for populating information in the newly created Project in the database</param>
            <returns>Newly created Project property details</returns>
            <response code="201">Returns newly created Projects property details</response>
            <response code="409">Project with the same name already exists in the repository</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ProjectsController.UpdateProjectPutAsync(System.Guid,ItemzApp.API.Models.UpdateProjectDTO)">
            <summary>
            Updating exsting Project based on Project Id (GUID)
            </summary>
            <param name="projectId">GUID representing an unique ID of the Project that you want to get</param>
            <param name="projectToBeUpdated">required Project properties to be updated</param>
            <returns>No contents are returned but only Status 204 indicating that Project was updated successfully </returns>
            <response code="204">No content are returned but status of 204 indicated that Project was successfully updated</response>
            <response code="404">Project based on projectId was not found</response>
            <response code="409">Project with updated name already exists in the repository</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ProjectsController.UpdateProjectPatchAsync(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ItemzApp.API.Models.UpdateProjectDTO})">
            <summary>
            Partially updating a single **Project**
            </summary>
            <param name="projectId">Id of the Project representated by a GUID.</param>
            <param name="projectPatchDocument">The set of operations to apply to the Project via JsonPatchDocument</param>
            <returns>an ActionResult of type Project</returns>
            <response code="204">No content are returned but status of 204 indicated that Project was successfully updated</response>
            <response code="404">Project based on projectId was not found</response>
            <response code="409">Project with updated name already exists in the repository</response>
            <response code="422">Validation problems occured during analyzing validation rules for the JsonPatchDocument </response>
            <remarks> Sample request (this request updates an **Project's name**)   
            Documentation regarding JSON Patch can be found at 
            *[ASP.NET Core - JSON Patch Operations](https://docs.microsoft.com/en-us/aspnet/core/web-api/jsonpatch?view=aspnetcore-3.1#operations)* 
            
                PATCH /api/Projects/{id}  
                [  
                    {   
                        "op": "replace",   
                        "path": "/name",   
                        "value": "PATCH Updated Name field"  
                    }   
                ]
            </remarks>
        </member>
        <member name="M:ItemzApp.API.Controllers.ProjectsController.DeleteProjectAsync(System.Guid)">
            <summary>
            Deleting a specific Project
            </summary>
            <param name="projectId">GUID representing an unique ID of the Project that you want to get</param>
            <returns>Status code 204 is returned without any content indicating that deletion of the specified Project was successful</returns>
            <response code="404">Project based on projectId was not found</response>
        </member>
        <member name="M:ItemzApp.API.Controllers.ProjectsController.GetProjectsOptions">
            <summary>
            Get list of supported HTTP Options for the Projects controller.
            </summary>
            <returns>Custom response header with key as "Allow" and value as different HTTP options that are allowed</returns>
            <response code="200">Custom response header with key as "Allow" and value as different HTTP options that are allowed</response>
        </member>
        <member name="T:ItemzApp.API.Entities.ItemzSeverity">
            <summary>
            Itemz Severity list values as ENUM
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.CreateItemzDTO">
            <summary>
            CreateItemzDTO shall be used for sending in request for creating new Itemz. 
            It will expose necessary properties to allow successful creation of new Itemz.
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.CreateItemzTypeDTO">
            <summary>
            CreateItemzTypeDTO shall be used for sending in request for creating new ItemzType.
            It will expose necessary properties to allow successful creation of the ItemzType.
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.CreateItemzTypeDTO.ProjectId">
            <summary>
            Project ID in the Guid form. 
            New ItemzType shall be created this project.
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.CreateProjectDTO">
            <summary>
            CreateProjectDTO shall be used for sending in request for creating new Project.
            It will expose necessary properties to allow successful creation of the Project.
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.DeleteItemzChangeHistoryDTO.ItemzId">
            <summary>
            itemzId of the Itemz representated by a GUID.
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.DeleteItemzChangeHistoryDTO.UptoDateTime">
            <summary>
            Date and Time upto which Itemz Change History data has to be deleted for given ItemzId.
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.GetItemzChangeHistoryDTO">
            <summary>
            Itemz Change History class containing details about changes loggged against Itemz.
            This Itemz Change History class is identified by Itemz ID against which changes are registered.
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzChangeHistoryDTO.ItemzId">
            <summary>
            itemzId of the Itemz representated by a GUID.
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzChangeHistoryDTO.CreatedDate">
            <summary>
            Date and Time when Itemz Change History was created
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzChangeHistoryDTO.OldValues">
            <summary>
            Old value of the Itemz Change History log
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzChangeHistoryDTO.NewValues">
            <summary>
            New value of the Itemz Change History log
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzChangeHistoryDTO.ChangeEvent">
            <summary>
            Actual event that triggered registration of Itemz Change History, either Added or Modified.
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.GetItemzDTO">
            <summary>
            Itemz class containing several properties that represents it.
            This Itemz class is returned by the "ItemzApp.API" in most of the cases when
            user sends request to read an Itemz record.
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzDTO.Id">
            <summary>
            Id of the Itemz representated by a GUID.
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzDTO.Name">
            <summary>
            Name or Title of the Itemz
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzDTO.Status">
            <summary>
            Status of the itemz
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzDTO.Priority">
            <summary>
            Priority of the Itemz
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzDTO.Description">
            <summary>
            Description of the Itemz
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzDTO.CreatedBy">
            <summary>
            User who created the Itemz
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzDTO.CreatedDate">
            <summary>
            Date and Time when Itemz was created
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzDTO.Severity">
            <summary>
            Severity of the Itemz
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.GetItemzTypeDTO">
            <summary>
            ItemzTypeDTO is a POCO used for serving requests like GetItemzTypes or GetItemzType by ItemzTypeID.
            It will carry specified set of data that are exposed when ItemzType details are requested throgh "ItemzApp.API"
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzTypeDTO.Id">
            <summary>
            Id of the ItemzType representated by a GUID.
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzTypeDTO.Name">
            <summary>
            ItemzType Name 
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzTypeDTO.Status">
            <summary>
            Status of the ItemzType
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzTypeDTO.Description">
            <summary>
            Description of the ItemzType
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzTypeDTO.CreatedBy">
            <summary>
            User who created the ItemzType
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzTypeDTO.CreatedDate">
            <summary>
            Date and Time when ItemzType was created
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetItemzTypeDTO.IsSystem">
            <summary>
            Returns true if it's system ItemzType otherwise false
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.GetProjectDTO">
            <summary>
            ProjectDTO is a POCO used for serving requests like GetProjects or GetProject by ProjectID.
            It will carry specified set of data that are exposed when project details are requested throgh "ItemzApp.API"
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetProjectDTO.Id">
            <summary>
            Id of the Project representated by a GUID.
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetProjectDTO.Name">
            <summary>
            Project Name 
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetProjectDTO.Status">
            <summary>
            Status of the Project
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetProjectDTO.Description">
            <summary>
            Description of the Project
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetProjectDTO.CreatedBy">
            <summary>
            User who created the Project
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.GetProjectDTO.CreatedDate">
            <summary>
            Date and Time when Project was created
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ItemzTypeItemzDTO.ItemzId">
            <summary>
            Id of the Itemz representated by a GUID.
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ItemzTypeItemzDTO.ItemzTypeId">
            <summary>
            Id of the ItemzType representated by a GUID.
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.ManipulateItemzDTO">
            <summary>
            ManipulateItemzDTO is used for updating Itemz
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateItemzDTO.Name">
            <summary>
            Name or Title of the Itemz
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateItemzDTO.Status">
            <summary>
            Status of the itemz
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateItemzDTO.Priority">
            <summary>
            Priority of the Itemz
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateItemzDTO.Description">
            <summary>
            Description of the Itemz
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateItemzDTO.Severity">
            <summary>
            Severity of the Itemz
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.ManipulateItemzTypeDTO">
            <summary>
            ManipulateItemzTypeDTO is used for updating ItemzType
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateItemzTypeDTO.Name">
            <summary>
            Name of the ItemzType
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateItemzTypeDTO.Status">
            <summary>
            Status of the ItemzType
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateItemzTypeDTO.Description">
            <summary>
            Description of the ItemzType
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.ManipulateProjectDTO">
            <summary>
            ManipulateProjectDTO is used for updating Project
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateProjectDTO.Name">
            <summary>
            Name of the Project
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateProjectDTO.Status">
            <summary>
            Status of the Project
            </summary>
        </member>
        <member name="P:ItemzApp.API.Models.ManipulateProjectDTO.Description">
            <summary>
            Description of the Project
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.UpdateItemzDTO">
            <summary>
            UpdateItemzDTO shall be used for sending in request for updating
            existing Itemz. It will expose necessary properties to allow existing Itemz 
            to be updated with new values for those properties.
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.UpdateItemzTypeDTO">
            <summary>
            UpdateItemzTypeDTO shall be used for sending in request for updating
            existing ItemzType. It will expose necessary properties to allow existing
            ItemzType to be updated with new values for those properties.
            </summary>
        </member>
        <member name="T:ItemzApp.API.Models.UpdateProjectDTO">
            <summary>
            UpdateProjectDTO shall be used for sending in request for updating
            existing Project. It will expose necessary properties to allow existing
            Project to be updated with new values for those properties.
            </summary>
        </member>
        <member name="M:ItemzApp.API.Services.ItemzChangeHistoryRepository.DeleteItemzChangeHistoryAsync(System.Guid,System.Nullable{System.DateTimeOffset})">
            <summary>
            Used for deleting Itemz Change History based on ItemzId and provided Date and Time as Cut-off for deletion
            
            If no records are deleted then we return ZERO integer value. This is to make this method behave as an idempotent method.
            </summary>
            <param name="ItemzId">GUID representing ItemzID for which Change History records should be deleted</param>
            <param name="DeleteUptoDateTime">Date time value which is treated as Cut-Off for identifying records that should be deleted</param>
            <returns>Integer value indicating number of itemz change history records that are deleted.</returns>
        </member>
    </members>
</doc>
