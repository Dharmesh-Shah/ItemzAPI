@page "/baseline/{BaselineId:guid}"
@using ItemzApp.WebUI.Client.Services.BaselineHierarchy
@using ItemzApp.WebUI.Client.Services.Baselines
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService

<h1>Baseline</h1>
<br />

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
 		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4">
			<MudCard style="background-color : #FABBBB;" >
				<MudCardContent>
					<MudItem Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
						<MudText Typo="Typo.h5" Align="Align.Left"><strong>@singleBaseline.Name </strong></MudText>
						<MudSpacer />
						<MudButton OnClick="async _ => await editBaselineDetails(BaselineId.ToString())" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Success"> Edit Baseline </MudButton>
							<MudButton OnClick="goBackToParentProject" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Warning" style="gap: 10px; margin-left : 10px"> Go Back </MudButton>
						</MudItem>
					<br />
					<MudDivider Style="color : black"   />
					<br />
					<MudText><strong>Baseline ID          : </strong> @singleBaseline.Id.ToString()</MudText>
					<MudText><strong>Baseline Description : </strong> @singleBaseline.Description</MudText>
				</MudCardContent>
			</MudCard>
			</MudPaper>
		</MudItem>
		<br />
 		<MudItem xs="12" sm="8">
			<MudText>Total number of ItemzType in the Baseline: @AllItemzTypesForBaseline.Count() </MudText>
			<MudDataGrid Items="@AllItemzTypesForBaseline" Filterable="true" SortMode="@SortMode.None" Groupable="false" Striped="true" FixedHeader="true" HeaderClass="background-color: red;">
				<Columns>
					<PropertyColumn Property="x => x.RecordId" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					<PropertyColumn Property="x => x.Name" />
					<PropertyColumn Property="x => x.NumberOfChildNodes" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					<TemplateColumn CellClass="d-flex justify-left">
						<CellTemplate>
							<MudButton Size="@Size.Large"
								Variant="@Variant.Filled" Color="@Color.Success"
									   OnClick="_ => openBaselineItemzTypeDetails(context.Item.RecordId.ToString())"> Open </MudButton>
						</CellTemplate>
					</TemplateColumn>
				</Columns>
			</MudDataGrid>
 		</MudItem>
	}
</MudGrid>
@code {
    [Parameter]
    public Guid BaselineId { get; set; }

    [Inject]
    public IBaselinesService baselineService { get; set; }

	[Inject]
	public IBaselineHierarchyService baselineHierarchyService { get; set; }

	public GetBaselineDTO singleBaseline { get; set; } = new();
	private List<BaselineHierarchyIdRecordDetailsDTO> AllItemzTypesForBaseline { get; set; } = new List<BaselineHierarchyIdRecordDetailsDTO>();
	private Guid parentId { get; set; } = new();
	public bool initializingPage { get; set; } = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			Thread.Sleep(300);

			singleBaseline = await baselineService.__Single_Baseline_By_GUID_ID__Async(BaselineId);

			//var returnedItemzTypeList = await ProjectService.__GET_ItemzTypes_By_Project__Async(ProjectId);
			var returnedItemzTypeList = await baselineHierarchyService.__Get_Immediate_Children_Baseline_Hierarchy_By_GUID__Async(BaselineId);


			if (returnedItemzTypeList != null)
			{
				AllItemzTypesForBaseline = returnedItemzTypeList.ToList();
			}

			initializingPage = false;

			// EXPLANATION : At the start of initialization process we capture parent record ID.
			// Now even if user decides to Delete this Itemz Record then also we can go back to it's
			// Parent ItemzType post completing deletion operation.
			var httpResponse = await baselineHierarchyService.__Get_BaselineHierarchy_Record_Details_By_GUID__Async(BaselineId);
			parentId = httpResponse.ParentRecordId;

			StateHasChanged();
		}
	}

	public async Task openBaselineItemzTypeDetails(string Id)
	{
		NavManager.NavigateTo($"/baselineItemzType/{Id}");
	}

	public void goBackToParentProject()
	{
		NavManager.NavigateTo($"/project/{parentId.ToString()}");
	}

	public async Task editBaselineDetails(string Id)
	{
		NavManager.NavigateTo($"/baselineDetails/{Id}");
	}

}
