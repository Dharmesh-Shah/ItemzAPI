@using System.Globalization
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Client.Services.BaselinesService

@* <h5>Change History Component</h5>
<br />
<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h5" Align="Align.Left"> Itemz Change History </MudText>
</MudPaper> *@

<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h4" Align="Align.Left">Project Baselines</MudText>
	<MudSpacer />
	<MudButton @onclick="async _ => await showFormCreateNewProjectBaseline()" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Create New Baseline </MudButton>
</MudPaper>
@if (showCreateBaselineForm)
{
<MudForm Model="@singleCreateBaseline" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
	<MudCardContent>
		<MudText>Project GUID Id: @ProjectId.ToString()</MudText>
		<MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!"
					  @bind-Value="singleCreateBaseline.Name"
					  For="@(() => singleCreateBaseline.Name)" />
		<MudTextField T="string" Label="Description" Required="true" RequiredError="Description is required!"
					  @bind-Value="singleCreateBaseline.Description"
					  For="@(() => singleCreateBaseline.Description)" />
	</MudCardContent>
	<MudCardActions>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" 
							Size="Size.Large"
							style="gap: 10px; margin : 10px"
				   OnClick="(() => createNewProjectBaseline(ProjectId))">
			<MudText>Create</MudText>
			</MudButton>
			@* <MudSpacer /> *@
		<MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Large" style="gap: 10px; margin-left : 10px"
					   OnClick="(() => hideFormCreateNewProjectBaseline())">
			<MudText>Cancel</MudText>
		</MudButton>
	</MudCardActions>
</MudForm>
}



<MudDataGrid Items="@ProjectBaselineRecords"
			 Filterable="true"
			 SortMode="@SortMode.None"
			 Groupable="false"
			 Striped="true"
			 FixedHeader="false"
			 Bordered="true"
			 HeaderClass="background-color: red;">
	<Columns>
		<PropertyColumn Property="x => x.CreatedDate" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " >
			<CellTemplate> @context.Item.CreatedDate.ToString("dd MMM yyyy HH:mm:ss", CultureInfo.CurrentCulture)</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.Id" Filterable="true" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " Resizable="true" />
		<PropertyColumn Property="x => x.Name" Filterable="true" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " Resizable="true" />
	</Columns>
</MudDataGrid>


@code {
	[Parameter]
	public Guid ProjectId { get; set; }

	[Inject]
	public IBaselinesService baselinesService { get; set; }

	public bool showCreateBaselineForm = false;

	public CreateBaselineDTO singleCreateBaseline { get; set; } = new();

	private List<GetBaselineDTO> ProjectBaselineRecords { get; set; } = new List<GetBaselineDTO>();

	//MudForm related fields
	bool success = true;
	string[] errors = { };
	MudForm form;
	// private bool hasFormFieldChanged { get; set; } = false;

	// protected override async Task OnInitializedAsync()
	// {
	// 	ProjectBaselineRecords = await itemzChangeHistoryService.__GET_ItemzChangeHistory_By_GUID_ItemzID__Async(ItemzId);
	// 	StateHasChanged();
	// }
	public async Task showFormCreateNewProjectBaseline()
	{
		if (showCreateBaselineForm == false)
		{
			showCreateBaselineForm = true;
		}
	}

	public async Task hideFormCreateNewProjectBaseline()
	{
		if (showCreateBaselineForm == true)
		{
			singleCreateBaseline = new();
			showCreateBaselineForm = false;
		}
	}


	public async Task createNewProjectBaseline(Guid projectId)
	{
		if (projectId != null)
		{
			CreateBaselineDTO tempCreateBaselineDTO = new();
			tempCreateBaselineDTO.ProjectId = projectId;
			tempCreateBaselineDTO.Name = singleCreateBaseline.Name;
			tempCreateBaselineDTO.Description = singleCreateBaseline.Description;
			var newlyCreatedBaseline = await baselinesService.__POST_Create_Baseline__Async(tempCreateBaselineDTO);
			ProjectBaselineRecords.Add(newlyCreatedBaseline);
			await hideFormCreateNewProjectBaseline();
		}
	}

	// private async Task formFieldChanged()
	// {
	// 	hasFormFieldChanged = true;
	// 	if (form != null)
	// 	{
	// 		await form.Validate();
	// 		if (form.IsValid)
	// 		{
	// 			disableUpdateProjectDetailsButton = false;
	// 		}
	// 		else
	// 		{
	// 			disableUpdateProjectDetailsButton = true;
	// 		}
	// 	}
	// }

}
