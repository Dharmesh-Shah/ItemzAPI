@using System.Globalization
@using ItemzApp.WebUI.Client.Services.BaselineHierarchy
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Client.Services.Baselines
@inject IDialogService DialogService
@inject NavigationManager NavManager

@* <h5>Change History Component</h5>
<br />
<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h5" Align="Align.Left"> Itemz Change History </MudText>
</MudPaper> *@


<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h4" Align="Align.Left">Baselines</MudText>
	<MudSpacer />
	<MudButton @onclick="async _ => await showFormCreateNewProjectBaseline()" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Create New Baseline </MudButton>
</MudPaper>

@if (creatingBaseline)
{
	<MudPaper Height="calc(100vh - 100px);" Width="100%">
	<MudOverlay Visible="@creatingBaseline" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Creating Baseline ... </MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudPaper>
}
else
{

	@if (showCreateBaselineForm)
	{
	<MudForm Model="@singleCreateBaseline" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
		<MudCardContent>
			<MudText>Project GUID Id: @ProjectId.ToString()</MudText>
			<MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!"
						  @bind-Value="singleCreateBaseline.Name"
						  For="@(() => singleCreateBaseline.Name)" />
			<MudTextField T="string" Label="Description" Required="true" RequiredError="Description is required!"
						  @bind-Value="singleCreateBaseline.Description"
						  For="@(() => singleCreateBaseline.Description)" />
		</MudCardContent>
		<MudCardActions>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" 
								Size="Size.Large"
								style="gap: 10px; margin : 10px"
					   OnClick="(() => createNewProjectBaseline(ProjectId))">
				<MudText>Create</MudText>
				</MudButton>
				@* <MudSpacer /> *@
			<MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Large" style="gap: 10px; margin-left : 10px"
						   OnClick="(() => hideFormCreateNewProjectBaseline())">
				<MudText>Cancel</MudText>
			</MudButton>
			<MudSpacer />
			<MudPaper Class="pa-4 ml-10 align-items-md-end" Style="border: 2px solid black; padding: 16px;" Outlined="false" >
				<MudAlert Severity="Severity.Error" 
					Variant="Variant.Filled"
					style="gap: 10px; margin-left : 10px">
					NOTE: Baseline Creation Process may take longer time as it creates snapshot of large volumn of data!
				</MudAlert>
			</MudPaper>
			@* <MudText style="gap: 10px; margin-left : 10px">NOTE: Baseline Creation Process may take longer time as it creates snapshot of large volumn of data ... </MudText> *@
		</MudCardActions>
	</MudForm>
	}

	if (ProjectBaselineRecords != null && ProjectBaselineRecords.Any())
	{

		<MudDataGrid Items="@ProjectBaselineRecords"
		Filterable="true"
				 SortMode="@SortMode.None"
				 Groupable="false"
				 Striped="true"
				 FixedHeader="false"
				 Bordered="true"
				 HeaderClass="background-color: red;">
		<Columns>
	@* 		<PropertyColumn Property="x => x.CreatedDate" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " >
				<CellTemplate> @context.Item.CreatedDate.ToString("dd MMM yyyy HH:mm:ss", CultureInfo.CurrentCulture)</CellTemplate>
			</PropertyColumn> *@
				<PropertyColumn Property="x => x.RecordId" Filterable="true" CellStyle="max-width: 50px; overflow-x: visible; white-space: normal; " Resizable="true">
					<HeaderTemplate>
						Baseline ID
					</HeaderTemplate>
				</PropertyColumn>
			<PropertyColumn Property="x => x.Name" Filterable="true" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " Resizable="true" />
			<TemplateColumn CellClass="d-flex justify-left">
				<CellTemplate>
					<MudStack Row>
							<MudButton Size="@Size.Large"
									   Variant="@Variant.Filled" Color="@Color.Success"
									   OnClick="_ => openBaseline(context.Item.RecordId)"> Open </MudButton>
							<MudButton Size="@Size.Large"
							   Variant="@Variant.Filled" Color="@Color.Error"
							   OnClick="_ => deleteBaseline(context.Item.RecordId, context.Item.Name!)"> Delete </MudButton>
					</MudStack>
				</CellTemplate>
			</TemplateColumn>
		</Columns>
	</MudDataGrid>
	}
	else
	{
		<MudPaper Class="pa-20 mt-10 align-content-md-center" Style="border: 2px solid black; padding: 16px;" Outlined="false" >
			<MudText Typo="Typo.h4" Align="Align.Center" Style="mt-10"> No Baseline data found.</MudText>
		</MudPaper>

	}

}

@code {
	[Parameter]
	public Guid ProjectId { get; set; }

	[Inject]
	public IBaselinesService baselinesService { get; set; }

	[Inject]
	public IBaselineHierarchyService baselineHierarchyService { get; set; }

	public bool showCreateBaselineForm = false;
	public bool creatingBaseline { get; set; } = false;

	public CreateBaselineDTO singleCreateBaseline { get; set; } = new();

	private List<BaselineHierarchyIdRecordDetailsDTO> ProjectBaselineRecords { get; set; } = new List<BaselineHierarchyIdRecordDetailsDTO>();

	//MudForm related fields
	bool success = true;
	string[] errors = { };
	MudForm form;
	// private bool hasFormFieldChanged { get; set; } = false;

	// protected override async Task OnInitializedAsync()
	// {
	// }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// if (ProjectId != Guid.Empty)
			// {
			// 	var tempProjectBaselineRecords = (await baselineHierarchyService.__Get_Immediate_Children_Baseline_Hierarchy_By_GUID__Async(ProjectId)).ToList();
			// 	if (tempProjectBaselineRecords != null && tempProjectBaselineRecords.Any() )
			// 	{
			// 		ProjectBaselineRecords = tempProjectBaselineRecords;
			// 	}
			// 	else
			// 	{
			// 		ProjectBaselineRecords = new();
			// 	}
			// 	StateHasChanged();
			// }
			await refreshProjectBaselineRecords();
		}
	}

	public async Task refreshProjectBaselineRecords()
	{
		if (ProjectId != Guid.Empty)
		{
			// ProjectBaselineRecords = new();
			try
			{
				ProjectBaselineRecords = new();
				var tempProjectBaselineRecords = (await baselineHierarchyService.__Get_Immediate_Children_Baseline_Hierarchy_By_GUID__Async(ProjectId)).ToList();
				if (tempProjectBaselineRecords != null && tempProjectBaselineRecords.Any())
				{
					ProjectBaselineRecords = tempProjectBaselineRecords;
				}

				StateHasChanged();
			}
			catch (Exception ex)
			{
				ProjectBaselineRecords = new List<BaselineHierarchyIdRecordDetailsDTO>();
			}


		}
	}
	public async Task showFormCreateNewProjectBaseline()
	{
		if (showCreateBaselineForm == false)
		{
			showCreateBaselineForm = true;
		}
	}

	public async Task hideFormCreateNewProjectBaseline()
	{
		if (showCreateBaselineForm == true)
		{
			singleCreateBaseline = new();
			showCreateBaselineForm = false;
		}
	}

	public async Task createNewProjectBaseline(Guid projectId)
	{
		if (projectId != null)
		{
			creatingBaseline = true;
			CreateBaselineDTO tempCreateBaselineDTO = new();
			tempCreateBaselineDTO.ProjectId = projectId;
			tempCreateBaselineDTO.Name = singleCreateBaseline.Name;
			tempCreateBaselineDTO.Description = singleCreateBaseline.Description;
			try
			{
				var _ignoreMe = await baselinesService.__POST_Create_Baseline__Async(tempCreateBaselineDTO);
				await refreshProjectBaselineRecords();
				await hideFormCreateNewProjectBaseline();
			}
			catch (Exception ex)
			{
				DialogService.ShowMessageBox("WARNING", markupMessage: new MarkupString($"<p style=\"color: red; \">{ex.Message}</p>"), yesText: "OK");
			}

			creatingBaseline = false;
		}
	}

	public async Task openBaseline(Guid baselineId)
	{
		NavManager.NavigateTo($"/baseline/{baselineId}");
	}

	public async Task deleteBaseline(Guid baselineId, string? baselineName = "")
	{
		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogPara = new DialogParameters();
		dialogPara.Add("deletingBaselineName", baselineName);
		var dialogref = await DialogService.ShowAsync<BaselineDeletionConfirmDialog>("CONFIRM", parameters: dialogPara, options);
		var dialogresult = await dialogref.Result;
		if (!(dialogresult!.Canceled))
		{
			await baselinesService.__DELETE_Baseline_By_GUID_ID__Async(baselineId);

			await refreshProjectBaselineRecords();
			// TODO :: WE COULD DO AN OVERLAY IN MUDBLAZOR WHILE PROJECT IS GETTING DELETED TO GIVE FEEDBACK TO USER.
		}
	}
}
