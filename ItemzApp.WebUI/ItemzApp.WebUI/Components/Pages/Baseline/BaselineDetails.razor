@page "/baselineDetails/{BaselineId:guid}"
@using ItemzApp.WebUI.Client.Services.BaselineHierarchy
@using ItemzApp.WebUI.Client.Services.Baselines
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService

<h1>Baseline Details</h1>
<br />

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
		<MudItem hidden="@hideValidationError" xs="12" sm="8">
			<MudPaper Class="pa-4 mud-height-full">
				<MudText Typo="Typo.subtitle2" Color="@Color.Error">@($"Validation Errors ({errors.Length})")</MudText>
				@foreach (var error in errors)
				{
					<MudText Color="@Color.Error">@error</MudText>
				}
			</MudPaper>
		</MudItem>
		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4">
				<MudForm Model="@singleBaseline" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" FieldChanged="formFieldChanged" >
			<MudCardContent>
						<MudText>Project GUID Id: @ParentId.ToString()</MudText>
				<br />
				<MudText>Baseline GUID Id: @BaselineId.ToString()</MudText>
				<br />
				<MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!"
								@bind-Value="singleBaseline.Name"
								For="@(() => singleBaseline.Name)" />

				<MudTextField T="string" Label="Description" Required="true" RequiredError="Description is required!"
					@bind-Value="singleBaseline.Description"
					For="@(() => singleBaseline.Description)" />
			</MudCardContent>
			<MudCardActions>
					<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(disableUpdateBaselineDetailsButton)"
								   Size="Size.Large"
								   style="gap: 10px; margin : 10px"
								OnClick="(() => HandleBaselineDetailsPatchSubmission())">
					<MudText>Save</MudText>
					</MudButton>
					<MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Large" style="gap: 10px; margin-left : 10px"
						OnClick="(() => goBackToBaseline())">
						<MudText>Cancel</MudText>
					</MudButton>
			</MudCardActions>
			<MudItem xs="12" sm="12" md="12" lg="9">
				<br />
					<MudExpansionPanels Elevation="10" style="margin-left : 15px">
						<MudExpansionPanel style="background-color : #FABBBB; color : red;"
											Text="DANGER ZONE!" MaxHeight="150" Expanded="false">
						<TitleContent>
							<div class="d-flex">
								<MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Medium" class="mr-3"></MudIcon>
								<MudText Color="Color.Error"><strong>DANGER ZONE!</strong></MudText>
							</div>
						</TitleContent>
						<ChildContent>
							<MudText Typo="Typo.body1" Color="Color.Error">Deleting Baseline means loosing all it's data. This is <STRONG>IRREVERSIBLE</STRONG> operation.</MudText>
							<MudButton @onclick="async _ => await OpenDeleteConfirmationDialogAsync(!string.IsNullOrEmpty(singleBaseline.Name) ? singleBaseline.Name! : string.Empty)" 
									Variant="Variant.Filled"
									Disabled="@(disableUpdateBaselineDetailsButton)"
									Color="Color.Error" Size="Size.Large" style="align-items: center; margin-top : 10px">
								Delete Baseline
							</MudButton>
						</ChildContent>
					</MudExpansionPanel>
				</MudExpansionPanels>
			</MudItem>
		</MudForm>

	</MudPaper>
	</MudItem>
	<MudItem xs="12" sm="8">
		<MudOverlay Visible="@updateBaselineButtonClicked" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit"> Updating ...  </MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudItem>
	<MudItem xs="12" sm="8">
		<MudOverlay Visible="@deletingBaseline" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Deleting ...</MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudItem>
	}
</MudGrid>
@code {
	[Parameter]
	public Guid BaselineId { get; set; }

	[Inject]
	public IBaselinesService baselinesService { get; set; }

	[Inject]
	public IBaselineHierarchyService baselineHierarchyService { get; set; }

	public Guid ParentId { get; set; }
	private bool updateBaselineButtonClicked = false;

	public GetBaselineDTO singleBaseline { get; set; } = new();
	public bool initializingPage { get; set; } = false;
	private bool deletingBaseline { get; set; } = false;
	private bool hasFormFieldChanged { get; set; } = false;

	//MudForm related fields
	bool success = true;
	bool disableUpdateBaselineDetailsButton = false;
	string[] errors = { };
	MudForm form;

	bool hideValidationError = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleBaseline = await baselinesService.__Single_Baseline_By_GUID_ID__Async(BaselineId);
			if (form != null)
			{
				await form.Validate();
				if (form.IsValid)
				{
					disableUpdateBaselineDetailsButton = false;
				}
				else
				{
					disableUpdateBaselineDetailsButton = true;
				}
				initializingPage = false;
				StateHasChanged();
			}

			// EXPLANATION : At the start of initialization process we capture parent record ID.
			// Now even if user decides to Delete this Baseline Record then also we can go back to it's
			// Parent Project post completing deletion operation.
			var httpResponse = await baselineHierarchyService.__Get_BaselineHierarchy_Record_Details_By_GUID__Async(BaselineId);
			ParentId = httpResponse.ParentRecordId;
			StateHasChanged();
		}
	}
	public async Task HandleBaselineDetailsPatchSubmission()
	{
		updateBaselineButtonClicked = true;
		try
		{
			if (hasFormFieldChanged)
			{
				var updateBaselineDTO = new UpdateBaselineDTO();
				updateBaselineDTO.Name = singleBaseline.Name;
				updateBaselineDTO.Description = singleBaseline.Description;
				await baselinesService.__PUT_Update_Baseline_By_GUID_ID__Async(BaselineId, updateBaselineDTO);
				Thread.Sleep(800);
			}
		}
		catch (Exception ex)
		{
			updateBaselineButtonClicked = false;
			await OpenExceptionDialogAsync("Problem Updating Baseline Details : " + ex.Message);
			return;
		}
		goBackToBaseline();
	}

	private async Task formFieldChanged()
	{
		hasFormFieldChanged = true;
		if (form != null)
		{
			await form.Validate();
			if (form.IsValid)
			{
				disableUpdateBaselineDetailsButton = false;
			}
			else
			{
				disableUpdateBaselineDetailsButton = true;
			}
		}
	}

	private async Task OpenDeleteConfirmationDialogAsync(string baselineName)
	{

		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogPara = new DialogParameters();
		dialogPara.Add("deletingBaselineName", baselineName);
		var dialogref = await DialogService.ShowAsync<BaselineDeletionConfirmDialog>("CONFIRM", parameters: dialogPara, options);
		var dialogresult = await dialogref.Result;
		if (!(dialogresult!.Canceled))
		{
			await baselinesService.__DELETE_Baseline_By_GUID_ID__Async(BaselineId);

			NavManager.NavigateTo($"/project/{ParentId.ToString()}");
			// TODO :: WE COULD DO AN OVERLAY IN MUDBLAZOR WHILE BASELINE IS GETTING DELETED TO GIVE FEEDBACK TO USER.
		}
	}

	private async Task OpenExceptionDialogAsync(string exceptionMessage)
	{
		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogPara = new DialogParameters();
		dialogPara.Add("exceptionMessage", exceptionMessage);
		var dialogref = await DialogService.ShowAsync<BaselineExceptionDialog>("CONFIRM", dialogPara, options);
	}

	public void goBackToBaseline()
	{
		NavManager.NavigateTo($"/baseline/{BaselineId.ToString()}");
	}

}
