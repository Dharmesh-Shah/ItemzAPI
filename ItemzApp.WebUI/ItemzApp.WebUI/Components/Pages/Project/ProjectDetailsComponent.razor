@using ItemzApp.WebUI.Client.Services.Project
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Components.Pages.Baseline
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService


<MudPaper Class="pa-4 mb-5 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h6" Align="Align.Left">Project Details</MudText>
</MudPaper>


<MudGrid>
@* 	@if (deletingProject)
	{
	<MudPaper Height="calc(100vh - 100px);" Width="100%">
		<MudOverlay Visible="@deletingProject" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Deleting ...</MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudPaper>
	} *@
	@if (initializingPage)
	{
		<MudPaper Class="mb-5" Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
		<MudContainer Class="pa-4 mb-5" MaxWidth="MaxWidth.ExtraLarge">
		<MudTabs @ref="projectTabs" ActivePanelIndex="activeIndex"
				Outlined="true" Position="Position.Top" Rounded="true" Border="true" 
				IconColor="Color.Secondary" ScrollIconColor="Color.Secondary" SliderColor = "Color.Secondary"
				ApplyEffectsToContainer="true" PanelClass="pa-4" MinimumTabWidth="200px" >
			<MudTabPanel @ref="projectTab" Text="Details" Icon="@Icons.Material.Filled.EditNote" @onclick="() => activeIndex = 0" >
				@if (errors.Length > 0)
				{
					<MudPaper Class="pa-4 mb-5 mud-height-full mud-width-full">
						<MudText Typo="Typo.subtitle2" Color="@Color.Error">@($"Validation Errors ({errors.Length})")</MudText>
						@foreach (var error in errors)
						{
							<MudText Color="@Color.Error">@error</MudText>
						}
					</MudPaper>
				}
				<MudPaper Class="pa-4 mb-5 mud-height-full mud-width-full">
				<MudForm Model="@singleProject" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" FieldChanged="formFieldChanged" >
					<MudCardContent>
						<MudText>Project GUID Id: @singleProject.Id.ToString()</MudText>
						<MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!"
										@bind-Value="singleProject.Name"
										For="@(() => singleProject.Name)" />
						<MudSelect @bind-Value="singleProject.Status"
									For="@(() => singleProject.Status)"
									Required ="true"
									RequiredError="Status is required!"
									Label="Status">
							@foreach (var _stringProjectStatusValue in _stringProjectStatusValues)
							{
								<MudSelectItem T="string" Value="_stringProjectStatusValue">@_stringProjectStatusValue</MudSelectItem>
							}
						</MudSelect>
						<MudTextField T="string" Label="Description" Required="true" RequiredError="Description is required!"
							@bind-Value="singleProject.Description"
							For="@(() => singleProject.Description)" />
					</MudCardContent>
					<MudCardActions>
							<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(disableUpdateProjectDetailsButton)"
										   Size="Size.Large"
										   style="gap: 10px; margin : 10px"
										OnClick="(() => HandleProjectDetailsPatchSubmission())">
							<MudText>Save</MudText>
							</MudButton>
							@* <MudSpacer /> *@
							@if (CalledFrom == nameof(ProjectDetails))
							{
									<MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Large" style="gap: 10px; margin-left : 10px"
									OnClick="(() => goBackToProject())">
								<MudText>Cancel</MudText>
							</MudButton>
							}
					</MudCardActions>
					@if (CalledFrom == nameof(ProjectDetails))
					{
					<MudItem xs="12" sm="9" md="6" lg="6">
						<br />
							<MudExpansionPanels Elevation="10" style="margin-left : 15px">
								<MudExpansionPanel style="background-color : #FABBBB; color : red;"
												   Text="DANGER ZONE!" MaxHeight="150" Expanded="false">
								<TitleContent>
									<div class="d-flex">
										<MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Medium" class="mr-3"></MudIcon>
										<MudText Color="Color.Error"><strong>DANGER ZONE!</strong></MudText>
									</div>
								</TitleContent>
								<ChildContent>
										<MudText Typo="Typo.body1" Color="Color.Error">Deleting project means loosing all it's data. This is <STRONG>IRREVERSIBLE</STRONG> operation.</MudText>
										<MudButton @onclick="OpenDeleteConfirmationDialogAsync" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" style="align-items: center; margin-top : 10px">
										Delete Project
									</MudButton>
								</ChildContent>
							</MudExpansionPanel>
						</MudExpansionPanels>
					</MudItem>
					}
				</MudForm>
				</MudPaper>
			</MudTabPanel>
				<MudTabPanel @ref="baselineTab" Icon="@Icons.Material.Filled.ContentCopy" Text="Baselines">
					<MudPaper Class="pa-4 mb-5 mud-height-full" Width="100%">
						<ProjectBaselineComponent ProjectId="@ProjectId" />
					</MudPaper>
			</MudTabPanel>
		</MudTabs>
	</MudContainer>
	<MudItem xs="12" sm="12">
		<MudOverlay Visible="@updateProjectButtonClicked" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit"> Updating ...  </MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudItem>
	<MudItem xs="12" sm="12">
		<MudOverlay Visible="@deletingProject" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Deleting ...</MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudItem>
	}
</MudGrid>
@code 
{

	[Parameter]
	public Guid ProjectId { get; set; }
	[Parameter]
	[SupplyParameterFromQuery(Name = "showBaselineTab")]
	public bool ShowBaselineTab { get; set; } = false;
	[Parameter]
	[SupplyParameterFromQuery(Name = "calledFrom")]
	public string CalledFrom { get; set; } = string.Empty;

	[Inject]
	public IProjectService ProjectService { get; set; }

	// public Guid displayOnlyProjectID = Guid.Empty ;
	private bool showDeleteConfirmation = false;
	private bool updateProjectButtonClicked = false;

	public GetProjectDTO singleProject { get; set; } = new();
	public bool initializingPage { get; set; } = false;
	private bool deletingProject { get; set; } = false;
	private bool hasFormFieldChanged { get; set; } = false;

	//MudForm related fields
	bool success = true;
	bool disableUpdateProjectDetailsButton = false;
	string[] errors = { };
	MudForm form;
	MudTabs projectTabs;
	MudTabPanel projectTab;
	MudTabPanel baselineTab;
	int activeIndex = 0;

	// TODO START HERE BY CREATING INSTANCE OF ProjectExceptionDialog AND SHOWING IT WHEN ERROR GETS ENCOUNTERED. 

	bool hideValidationError = true;
	string[] _stringProjectStatusValues = { };


	// protected override void OnInitialized() 
	// {
	// 	if (ShowBaselineTab == true)
	// 	{
	// 		projectTabs.ActivatePanel(baselineTab);
	// 	}

	// 	StateHasChanged();
	// }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleProject = await ProjectService.__Single_Project_By_GUID_ID__Async(ProjectId);
			if (form != null)
			{
				await form.Validate();
				if (form.IsValid)
				{
					disableUpdateProjectDetailsButton = false;
				}
				else
				{
					disableUpdateProjectDetailsButton = true;
				}
			}
			initializingPage = false;

			// EXPLANATION :: First we create string list and then just call ToArray() for producing required string array
			List<string> tempList = new List<string>();
			foreach (var _projectStatusValue in Enum.GetValues<ProjectStatus>())
			{
				tempList.Add(_projectStatusValue.ToString().Trim());
			}
			_stringProjectStatusValues = tempList.ToArray();

			if (ShowBaselineTab == true)
			{
				activeIndex = 1;
			}
			StateHasChanged();
		}
	}
	public async Task HandleProjectDetailsPatchSubmission()
	{
		updateProjectButtonClicked = true;
		try
		{
			if (hasFormFieldChanged)
			{
				var updatedResult = await ProjectService.__PUT_Update_Project_By_GUID_ID__Async(ProjectId, singleProject);
				Thread.Sleep(800);
			}
		}
		catch (Exception ex)
		{
			updateProjectButtonClicked = false;
			await OpenExceptionDialogAsync("Problem Updating Project Details : " + ex.Message);
			return;
		}
		finally
		{
			updateProjectButtonClicked = false;
		}

		// TODO :: IF IT UPDATES THE PROJECT THEN DISABLE SUBMIT BUTTON AND CONFIRM ON SCREEN THAT IT'S NOW UPDATED SUCCESSFULLY

		if (CalledFrom == nameof(ProjectDetails))
		{
			goBackToProject();
		}

	}

	private async Task formFieldChanged()
	{
		hasFormFieldChanged = true;
		if (form != null)
		{
			await form.Validate();
			if (form.IsValid)
			{
				disableUpdateProjectDetailsButton = false;
			}
			else
			{
				disableUpdateProjectDetailsButton = true;
			}
		}
	}

	public async Task deleteProject()
	{
		await ProjectService.__DELETE_Project_By_GUID_ID__Async(ProjectId);
		NavManager.NavigateTo("/projects");
	}
	private async Task OpenDeleteConfirmationDialogAsync()
	{
		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogref = await DialogService.ShowAsync<ProjectDeletionConfirmDialog>("CONFIRM", options);
		var dialogresult = await dialogref.Result;
		if (!(dialogresult!.Canceled))
		{
			deletingProject = true;
			StateHasChanged();
			await deleteProject();
			Thread.Sleep(200);
		}
	}

	private async Task OpenExceptionDialogAsync(string exceptionMessage)
	{
		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogPara = new DialogParameters();
		dialogPara.Add("exceptionMessage", exceptionMessage);
		var dialogref = await DialogService.ShowAsync<ProjectExceptionDialog>("CONFIRM", dialogPara, options);
		// var dialogresult = await dialogref.Result;
	}

	public void goBackToProject()
	{
		NavManager.NavigateTo($"/project/{ProjectId.ToString()}");
	}

}
