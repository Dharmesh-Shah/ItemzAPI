@page "/project/{ProjectId:guid}"
@using ItemzApp.WebUI.Client.Services.Hierarchy
@using ItemzApp.WebUI.Client.Services.Project
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService

<h1>Project</h1>
<br />

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
 		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4">
			<MudCard style="background-color : #FABBBB;" >
				<MudCardContent>
					<MudItem Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
						<MudText Typo="Typo.h5" Align="Align.Left"><strong>@singleProject.Name </strong></MudText>
						<MudSpacer />
						<MudButton OnClick="async _ => await editProjectDetails(ProjectId.ToString())" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Success"> Edit Project </MudButton>
						<MudButton OnClick="goBackToProjects" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Warning" style="gap: 10px; margin-left : 10px"> Go Back </MudButton>
						</MudItem>
					<br />
					<MudDivider Style="color : black"   />
					<br />
					<MudText><strong>Project ID          : </strong> @singleProject.Id.ToString()</MudText>
					<MudText><strong>Project Status      : </strong> @singleProject.Status</MudText>
					<MudText><strong>Project Description : </strong> @singleProject.Description</MudText>
				</MudCardContent>
			</MudCard>
			</MudPaper>
		</MudItem>
		<br />
 		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
				<MudText Typo="Typo.h4" Align="Align.Left">Itemz Types</MudText>
				<MudSpacer />
				<MudButton @onclick="async _ => await createNewItemzType(ProjectId.ToString())" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Create Itemz Type </MudButton>
			</MudPaper>
			<MudText>Total number of ItemzType in the project : @AllItemzTypesForProject.Count() </MudText>
			<MudDataGrid Items="@AllItemzTypesForProject" Filterable="true" SortMode="@SortMode.None" Groupable="false" Striped="true" FixedHeader="true" HeaderClass="background-color: red;">
				<Columns>
					<PropertyColumn Property="x => x.RecordId" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					<PropertyColumn Property="x => x.Name" />
					<PropertyColumn Property="x => x.NumberOfChildNodes" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					<TemplateColumn CellClass="d-flex justify-left">
						<CellTemplate>
@* 							<MudButton Size="@Size.Large"
								Variant="@Variant.Filled" Color="@Color.Success" 
								Disabled="context.Item.IsSystem"
								OnClick="_ => editItemzTypeDetails(context.Item.Id.ToString())"> Open </MudButton> *@
							<MudButton Size="@Size.Large"
								Variant="@Variant.Filled" Color="@Color.Success" 
								OnClick="_ => editItemzTypeDetails(context.Item.RecordId.ToString())"> Open </MudButton>
						</CellTemplate>
					</TemplateColumn>
				</Columns>
			</MudDataGrid>
 		</MudItem>
}
</MudGrid>
@code {
	[Parameter]
	public Guid ProjectId { get; set; }

	[Inject]
	public IProjectService ProjectService { get; set; }
	
	[Inject]
	public IHierarchyService HierarchyService { get; set; }

	public GetProjectDTO singleProject { get; set; } = new();
	private List<HierarchyIdRecordDetailsDTO> AllItemzTypesForProject { get; set; } = new List<HierarchyIdRecordDetailsDTO>();
	public bool initializingPage { get; set; } = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			Thread.Sleep(300);

			singleProject = await ProjectService.__Single_Project_By_GUID_ID__Async(ProjectId);

			//var returnedItemzTypeList = await ProjectService.__GET_ItemzTypes_By_Project__Async(ProjectId);
			var returnedItemzTypeList = await HierarchyService.__Get_Immediate_Children_Hierarchy_By_GUID__Async(ProjectId);


			if (returnedItemzTypeList != null)
			{
				AllItemzTypesForProject = returnedItemzTypeList.ToList();
			}

			initializingPage = false;
			StateHasChanged();
		}
	}

	public async Task editItemzTypeDetails(string Id)
	{
		NavManager.NavigateTo($"/itemzType/{Id}");
	}

	public void goBackToProjects()
	{
		NavManager.NavigateTo("/projects");
	}

	public async Task createNewItemzType(string projectId)
	{
		NavManager.NavigateTo($"/CreateItemzType/{projectId}");
	}

	public async Task editProjectDetails(string Id)
	{
		NavManager.NavigateTo($"/projectDetails/{Id}");
	}

}
