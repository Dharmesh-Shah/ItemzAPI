@page "/ProjectTreeView/{ProjectId:guid}"
@using ItemzApp.WebUI.Client.Services.Hierarchy
@using ItemzApp.WebUI.Client.Services.Project
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.ObjectModel
@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject IJSRuntime JS

<MudGrid Spacing="6" Justify="Justify.FlexStart">
    <MudItem xs="6">
        <MudPaper Width="500px" Elevation="0">
            @if (showLoadingMessage)
            {
                <MudText Typo="Typo.button" Color="Color.Secondary" HtmlTag="h3" Align="Align.Center"> Loading in Background ... </MudText>
                <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
            }
            else
            {
                <MudButton OnClick="@(() => projectMudTreeView.ExpandAllAsync())" Variant="Variant.Filled">Expand All</MudButton>
            }
            <div class="resizable">
                <MudTreeView @ref="projectMudTreeView" Items="@InitialTreeItems"
                             Color="Color.Secondary"
                             Hover="true"
                             ExpandOnDoubleClick="true"
                             Width="100%">
                    <ItemTemplate>
                        @{
                        // Casting context from TreeItemData<string> to our own derived class TreeItemPresenter
                        // for convenient usage in the template
                            var presenter = context as TreeItemPresenter;
                        }
                        <MudTreeViewItem Value="@context.Value"
                                         Text="@context.Text"
                                         Icon="@context.Icon"
                                         Expandable="@( @context.Children.Count()>0 ? true : false )"
                                         LoadingIconColor="Color.Info"
                                         Items="@context.Children"
                                         EndText="@(
                                (@presenter.Children.Count() > 0 ? ("[C" + @presenter.Children.Count().ToString() + "]") : "") +
                                (@presenter.Level > 0 ? ("[L" + @presenter.Level.ToString() + "]") : "")
                                        )" 
                    />
                                     @* CanExpand="@( @context.Children.Count()>0 ? true : false )" 
                                     EndText="@presenter?.childNumber" /> *@
                    </ItemTemplate>
                </MudTreeView>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {

    [Parameter]
    public Guid ProjectId { get; set; }

    [Inject]
    public IProjectService ProjectService { get; set; }

    [Inject]
    public IHierarchyService HierarchyService { get; set; }

    public MudTreeView<Guid> projectMudTreeView;

    private bool showLoadingMessage = true;

    // private List<TreeItemData<Guid>> InitialTreeItems { get; set; } = new();
    // private List<TreeItemData<Guid>> ServerTreeItems { get; set; } = new();

    private List<TreeItemData<Guid>> InitialTreeItems { get; set; } = new();


    public HierarchyIdRecordDetailsDTO singleProject { get; set; } = new();
    private List<HierarchyIdRecordDetailsDTO> AllItemzTypesForProject { get; set; } = new List<HierarchyIdRecordDetailsDTO>();
    public bool initializingPage { get; set; } = false;

    public class TreeItemPresenter : MudBlazor.TreeItemData<Guid>
    {
        public string RecordType { get; set; }
        public int? Level { get; set; }

        public TreeItemPresenter(Guid value, string text, string icon, string recordType, int? level, bool expandable) : base(value)
        {
            Value = value;
            Text = text;
            Icon = icon;
            RecordType = recordType;
            Level = level ?? 0 ;
            Expandable = expandable;
            Children = new List<TreeItemData<Guid>>();
        }
    }

    public void AddChildrens(TreeItemData<Guid> parentTempTreeViewNode, List<NestedHierarchyIdRecordDetailsDTO> Children )
    {
        foreach (var child in Children)
        {

            var childTempTreeViewNode = new TreeItemPresenter
                (
                    value: child.RecordId
                    , text: child.Name
                    , icon: (child.RecordType.ToLower() == "itemztype" ? @Icons.Material.Filled.Pix :
                                                   child.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel)
                    , recordType: child.RecordType
                    , level: child.Level
                    , expandable: (child.Children.Count() > 0 ? true : false)
                );

            // TreeItemData<Guid> childTempTreeViewNode = new TreeItemData<Guid>
            // {
            //     Value = child.RecordId
            //     , Text= child.Name
            //     , Icon= (child.RecordType.ToLower() == "itemztype" ? @Icons.Material.Filled.Pix :
            //                                     child.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel)
            //     , Expandable= (child.Children.Count() > 0 ? true : false)
            // };

            // childTempTreeViewNode.Children = new();

            if (child.Children.Count() > 0)
            {
                AddChildrens(childTempTreeViewNode, child.Children);
            }

            parentTempTreeViewNode.Children.Add(childTempTreeViewNode);
        }
    }

    // protected override async Task OnInitializedAsync()
    // {


    // // Fetch remaining data in the background
    // _ = LoadRemainingData(ProjectId);

    // singleProject = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ProjectId);

    // if (singleProject == null)
    // {
    //     throw new ApplicationException($"No project record found for GUID {ProjectId}");
    // }

    // TreeItemPresenter tempTreeView = new TreeItemPresenter
    //     (
    //         value: singleProject.RecordId
    //         , text: ("DADADADA " + singleProject.Name)
    //         , icon: @Icons.Material.Filled.LocalFlorist
    //         , expandable: true
    //     );
    // tempTreeView.Children = new();

    // InitialTreeItems.Add(tempTreeView);

    // }


    private async Task<List<TreeItemData<Guid>>> LoadInitialData(Guid ProjectId)
    {
        // Load initial set of tree nodes

        singleProject = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ProjectId);

        if (singleProject == null)
        {
            throw new ApplicationException($"No project record found for GUID {ProjectId}");
        }

        var tempTreeView = new TreeItemPresenter
             (
                 value: singleProject.RecordId
                 , text: singleProject.Name
                 , icon: @Icons.Material.Filled.LocalFlorist
                 , recordType: singleProject.RecordType
                 , level: singleProject.Level
                 , expandable: true
             );

        //tempTreeView.Children = new();

        // var tempTreeView = new TreeItemData<Guid>
        //     {
        //         Value =  singleProject.RecordId
        //         , Text = singleProject.Name
        //         , Icon = @Icons.Material.Filled.LocalFlorist
        //         , Expandable = true
        //             ,
        //         Children = new List<TreeItemData<Guid>>()
        // };

        // tempTreeView.Children = new();


        List<TreeItemData<Guid>> _children = new();

        var returnedItemzTypeList = await HierarchyService.__Get_Immediate_Children_Hierarchy_By_GUID__Async(ProjectId);

        if (returnedItemzTypeList!.Count() > 0)
        {
            foreach (var _itemzType in returnedItemzTypeList!)
            {
                _children.Add(new TreeItemPresenter
                                (
                value: _itemzType.RecordId
                , text: _itemzType.Name
                , icon: _itemzType.RecordType!.ToLower() == "project" ? @Icons.Material.Filled.LocalFlorist :
                                                     _itemzType.RecordType!.ToLower() == "itemztype" ? @Icons.Material.Filled.Pix :
                                                             _itemzType.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel
                , recordType: _itemzType.RecordType
                , level: _itemzType.Level
                , expandable: true
                ));

                // _children.Add(new TreeItemData<Guid>
                //     {
                //         Value = _itemzType.RecordId
                //                     ,
                //         Text = _itemzType.Name
                //                     ,
                //         Icon = _itemzType.RecordType!.ToLower() == "project" ? @Icons.Material.Filled.LocalFlorist :
                //                                     _itemzType.RecordType!.ToLower() == "itemztype" ? @Icons.Material.Filled.Pix :
                //                                             _itemzType.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel
                //                     ,
                //         Expandable = true
                //                     ,
                //         Children = new List<TreeItemData<Guid>>()
                //     });
            }

            // Update the tree items with additional data
            foreach (var node in _children)
            {
                tempTreeView.Children.Add(node);
            }
        }

        List<TreeItemData<Guid>> tempList = new();

        tempList.Add(tempTreeView);

        return tempList;
    }

    private async Task<List<TreeItemData<Guid>>> LoadAllProjectHierarchyData(Guid ProjectId)
    {
        List<TreeItemData<Guid>> _projectHierarchyTreeNodes = new();


        // Load initial set of tree nodes

        singleProject = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ProjectId);

        if (singleProject == null)
        {
            throw new ApplicationException($"No project record found for GUID {ProjectId}");
        }

        var _tempTreeViewProjectNode = new TreeItemPresenter
            (
                value: singleProject.RecordId
                , text: singleProject.Name
                , icon: @Icons.Material.Filled.LocalFlorist
                , recordType: singleProject.RecordType
                , level: singleProject.Level
                , expandable: true
            );

        // var _tempTreeViewProjectNode = new TreeItemData<Guid>
        //     {
        //         Value = singleProject.RecordId
        //             ,
        //         Text = singleProject.Name
        //             ,
        //         Icon = @Icons.Material.Filled.LocalFlorist
        //             ,
        //         Expandable = true
        //                 ,
        //         Children = new List<TreeItemData<Guid>>()
        //     };

        _projectHierarchyTreeNodes.Add(_tempTreeViewProjectNode);

        var allHierarchyDataFromAPI = await HierarchyService.__Get_All_Children_Hierarchy_By_GUID__Async(ProjectId);

        if (allHierarchyDataFromAPI != null)
        {

            foreach (var singleHierarchyDataFromAPI in allHierarchyDataFromAPI)
            {
                TreeItemData<Guid> childTempTreeViewNode = new TreeItemPresenter
                    (
                        value: singleHierarchyDataFromAPI.RecordId
                        , text: singleHierarchyDataFromAPI.Name
                        , icon: (singleHierarchyDataFromAPI.RecordType.ToLower() == "itemztype" ? @Icons.Material.Filled.Pix :
                                            singleHierarchyDataFromAPI.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel)
                        , recordType: singleHierarchyDataFromAPI.RecordType
                        , level: singleHierarchyDataFromAPI.Level
                        , expandable: (singleHierarchyDataFromAPI.Children.Count() > 0 ? true : false)
                    );

                // TreeItemData<Guid> childTempTreeViewNode = new TreeItemData<Guid>{
                //         Value= singleHierarchyDataFromAPI.RecordId
                //         , Text= singleHierarchyDataFromAPI.Name
                //         , Icon= (singleHierarchyDataFromAPI.RecordType.ToLower() == "itemztype" ? @Icons.Material.Filled.Pix :
                //                                         singleHierarchyDataFromAPI.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel)
                //         , Expandable= (singleHierarchyDataFromAPI.Children.Count() > 0 ? true : false)
                //             ,
                //         Children = new List<TreeItemData<Guid>>()
                // };

                if (singleHierarchyDataFromAPI.Children.Count() > 0)
                {
                    AddChildrens(childTempTreeViewNode, singleHierarchyDataFromAPI.Children);
                }

                _projectHierarchyTreeNodes.FirstOrDefault()!.Children!.Add(childTempTreeViewNode);

            }

        }
        return _projectHierarchyTreeNodes;
        // InitialTreeItems.Add(tempTreeView);
    }
    // protected async override void OnInitialized()
    // {
    //     // Load initial data
    //     InitialTreeItems = await LoadInitialData(ProjectId);
    //     StateHasChanged();

    // }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load initial data
            InitialTreeItems = await LoadInitialData(ProjectId);
            StateHasChanged();


            Thread.Sleep(900);
            // Load Entire Hierarchy data

            InitialTreeItems = await LoadAllProjectHierarchyData(ProjectId);

            // Fetch ItemzType Data
            // _ = LoadItemzTypesData(ProjectId);

            // await projectMudTreeView.ExpandAllAsync();
            showLoadingMessage = false; 
            StateHasChanged();
            
            // Initialize resizable functionality 
            await JS.InvokeVoidAsync("initializeResizable");

        }
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {

    //         singleProject = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ProjectId);

          
    //         if (singleProject == null)
    //         {
    //             throw new ApplicationException($"No project record found for GUID {ProjectId}");
    //         }

    //         TreeItemPresenter tempTreeView = new TreeItemPresenter
    //             (
    //                 value: singleProject.RecordId
    //                 , text: ("DADADADA" + singleProject.Name)
    //                 , icon: @Icons.Material.Filled.LocalFlorist
    //                 , expandable: true
    //             );
    //         tempTreeView.Children = new();


    //         var allHierarchyDataFromAPI = await HierarchyService.__Get_All_Children_Hierarchy_By_GUID__Async(ProjectId);

    //         if (allHierarchyDataFromAPI != null)
    //         {
    //             foreach (var singleHierarchyDataFromAPI in allHierarchyDataFromAPI)
    //             {

    //                 TreeItemPresenter childTempTreeViewNode = new TreeItemPresenter(
    //                     value: singleHierarchyDataFromAPI.RecordId
    //                     , text: singleHierarchyDataFromAPI.Name
    //                     , icon: (singleHierarchyDataFromAPI.RecordType.ToLower() == "itemztype" ? @Icons.Material.Filled.Pix :
    //                                                     singleHierarchyDataFromAPI.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel)
    //                     , expandable: (singleHierarchyDataFromAPI.Children.Count() > 0 ? true : false)
    //                 );
    //                 childTempTreeViewNode.Children = new();

    //                 if (singleHierarchyDataFromAPI.Children.Count() > 0)
    //                 {
    //                     AddChildrens(childTempTreeViewNode, singleHierarchyDataFromAPI.Children);
    //                 }

    //                 tempTreeView.Children.Add(childTempTreeViewNode);
    //             }

    //         }

    //         InitialTreeItems.Add(tempTreeView);

    //         StateHasChanged();
    //     }
    // }


    // // public async Task<IReadOnlyCollection<TreeItemData<Guid>>> LoadServerDataFromItemzApi(Guid parentValue)
    // // {

    // //     foreach (var item in InitialTreeItems)
    // //     {
    // //         if (item.Value == parentValue)
    // //             return item.Children;
    // //         if (!item.HasChildren)
    // //             continue;
    // //         var descendentItem = FindTreeItemData(parentValue, item);
    // //         if (descendentItem != null)
    // //             return descendentItem.Children;
    // //     }
    // //     return null;
    // // }

    // // private TreeItemData<Guid> FindTreeItemData(Guid value, TreeItemData<Guid> parent)
    // // {
    // //     foreach (var child in parent.Children)
    // //     {
    // //         if (child.Value == value)
    // //             return child;
    // //         if (!child.HasChildren)
    // //             continue;
    // //         var descendentItem = FindTreeItemData(value, child);
    // //         if (descendentItem != null)
    // //             return descendentItem;
    // //     }
    // //     return null;
    // // }

 }