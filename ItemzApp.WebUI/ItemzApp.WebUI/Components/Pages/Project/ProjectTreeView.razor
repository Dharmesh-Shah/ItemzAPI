@page "/ProjectTreeView/{ProjectId:guid}"
@using ItemzApp.WebUI.Client.Services.Hierarchy
@using ItemzApp.WebUI.Client.Services.Project
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.ObjectModel
@inject NavigationManager NavManager
@inject IDialogService DialogService

<MudGrid Spacing="6" Justify="Justify.FlexStart">
    <MudItem xs="6">
        <MudPaper Width="500px" Elevation="0">
            @if (showLoadingMessage)
            {
                @* <MudText Typo="Typo.button" Color="Color.Secondary" HtmlTag="h3" Align="Align.Center"> Loading in Background ... </MudText> *@
                <MudText Typo="Typo.button" Color="Color.Secondary" HtmlTag="h3" Align="Align.Center"> Loading in Background ... </MudText>
                <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
            }
            else
            {
                <MudButton OnClick="@(()=>_TWO_TreeView.ExpandAllAsync())" Variant="Variant.Filled">Expand All</MudButton>
            }
            <MudTreeView @ref="_TWO_TreeView" Items="@_TWO_InitialTreeItems"
                         Color="Color.Secondary"
                         Hover="true"
                         ExpandOnDoubleClick="true"
                         Width=" 100%">
                <ItemTemplate>
                    @{
                        // Casting context from TreeItemData<string> to our own derived class _TWO_TreeItemPresenter
                        // for convenient usage in the template
                        var presenter = context as TreeItemData<Guid>;
                    }
                    <MudTreeViewItem Text="@context.Text"
                                     Value="@context.Value"
                                     Icon="@context.Icon"
                                     LoadingIconColor="Color.Info"
                                     Items="@context.Children"
                                     CanExpand="@( @context.Children.Count()>0 ? true : false )"
                                     EndText="@( @context.Children.Count() > 0 ? ("[" + @context.Children.Count().ToString() + "]") : ""   )" />
                                     @* EndText="@presenter?.childNumber" /> *@
                </ItemTemplate>
            </MudTreeView>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {

    [Parameter]
    public Guid ProjectId { get; set; }

    [Inject]
    public IProjectService ProjectService { get; set; }

    [Inject]
    public IHierarchyService HierarchyService { get; set; }

    public MudTreeView<Guid> _TWO_TreeView;

    private bool showLoadingMessage = true;

    // private List<TreeItemData<Guid>> InitialTreeItems { get; set; } = new();
    // private List<TreeItemData<Guid>> ServerTreeItems { get; set; } = new();

    private List<TreeItemData<Guid>> _TWO_InitialTreeItems { get; set; } = new();
    // private List<TreeItemData<Guid>> _TWO_ServerTreeItems { get; set; } = new();



    public HierarchyIdRecordDetailsDTO singleProject { get; set; } = new();
    private List<HierarchyIdRecordDetailsDTO> AllItemzTypesForProject { get; set; } = new List<HierarchyIdRecordDetailsDTO>();
    public bool initializingPage { get; set; } = false;


    public class _TWO_TreeItemPresenter<T> : MudBlazor.TreeItemData<T>
    {
        public _TWO_TreeItemPresenter(T value, string text, string icon, bool expandable) : base(value)
        {
            Value = value;
            Text = text;
            Icon = icon;
            Expandable = expandable;
        }
    }

    public void _TWO_AddChildrens(TreeItemData<Guid> _TWO_parentTempTreeViewNode, List<NestedHierarchyIdRecordDetailsDTO> Children )
    {
        foreach (var child in Children)
        {

            TreeItemData<Guid> _TWO_childTempTreeViewNode = new TreeItemData<Guid>
            {
                Value = child.RecordId
                , Text= child.Name
                , Icon= (child.RecordType.ToLower() == "itemztype" ? @Icons.Material.Filled.MenuBook :
                                                child.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel)
                , Expandable= (child.Children.Count() > 0 ? true : false)
                    ,
                    Children = new List<TreeItemData<Guid>>()
            };

            // _TWO_childTempTreeViewNode.Children = new();

            if (child.Children.Count() > 0)
            {
                _TWO_AddChildrens(_TWO_childTempTreeViewNode, child.Children);
            }

            _TWO_parentTempTreeViewNode.Children.Add(_TWO_childTempTreeViewNode);
        }
    }

    // protected override async Task OnInitializedAsync()
    // {


    // // Fetch remaining data in the background
    // _ = LoadRemainingData(ProjectId);

    // singleProject = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ProjectId);

    // if (singleProject == null)
    // {
    //     throw new ApplicationException($"No project record found for GUID {ProjectId}");
    // }

    // _TWO_TreeItemPresenter _TWO_tempTreeView = new _TWO_TreeItemPresenter
    //     (
    //         value: singleProject.RecordId
    //         , text: ("DADADADA " + singleProject.Name)
    //         , icon: @Icons.Material.Filled.LocalFlorist
    //         , expandable: true
    //     );
    // _TWO_tempTreeView.Children = new();

    // _TWO_InitialTreeItems.Add(_TWO_tempTreeView);

    // }


    private async Task<List<TreeItemData<Guid>>> LoadInitialData(Guid ProjectId)
    {
        // Load initial set of tree nodes

        singleProject = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ProjectId);

        if (singleProject == null)
        {
            throw new ApplicationException($"No project record found for GUID {ProjectId}");
        }

        // TreeItemData<Guid> _TWO_tempTreeView = new TreeItemData<Guid>
        //     (
        //         value: singleProject.RecordId
        //         , text: ("DADADADA " + singleProject.Name)
        //         , icon: @Icons.Material.Filled.LocalFlorist
        //         , expandable: true
        //     );

        var _TWO_tempTreeView = new TreeItemData<Guid>
            {
                Value =  singleProject.RecordId
                , Text = singleProject.Name
                , Icon = @Icons.Material.Filled.LocalFlorist
                , Expandable = true
                    ,
                Children = new List<TreeItemData<Guid>>()
        };

        // _TWO_tempTreeView.Children = new();


        List<TreeItemData<Guid>> _children = new();

        var returnedItemzTypeList = await HierarchyService.__Get_Immediate_Children_Hierarchy_By_GUID__Async(ProjectId);

        if (returnedItemzTypeList!.Count() > 0)
        {
            foreach (var _itemzType in returnedItemzTypeList!)
            {
                _children.Add(new TreeItemData<Guid>
                    {
                        Value = _itemzType.RecordId
                                ,
                        Text = _itemzType.Name
                                ,
                        Icon = _itemzType.RecordType!.ToLower() == "project" ? @Icons.Material.Filled.LocalFlorist :
                                                _itemzType.RecordType!.ToLower() == "itemztype" ? @Icons.Material.Filled.MenuBook :
                                                        _itemzType.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel
                                ,
                        Expandable = true
                                ,
                        Children = new List<TreeItemData<Guid>>()
                    });
            }

            // Update the tree items with additional data
            foreach (var node in _children)
            {
                _TWO_tempTreeView.Children.Add(node);
            }
        }

        List<TreeItemData<Guid>> tempList = new();

        tempList.Add(_TWO_tempTreeView);

        return tempList;
    }

    private async Task<List<TreeItemData<Guid>>> LoadAllProjectHierarchyData(Guid ProjectId)
    {
        List<TreeItemData<Guid>> _projectHierarchyTreeNodes = new();


        // Load initial set of tree nodes

        singleProject = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ProjectId);

        if (singleProject == null)
        {
            throw new ApplicationException($"No project record found for GUID {ProjectId}");
        }

        var _tempTreeViewProjectNode = new TreeItemData<Guid>
            {
                Value = singleProject.RecordId
                    ,
                Text = singleProject.Name
                    ,
                Icon = @Icons.Material.Filled.LocalFlorist
                    ,
                Expandable = true
                        ,
                Children = new List<TreeItemData<Guid>>()
            };

        _projectHierarchyTreeNodes.Add(_tempTreeViewProjectNode);

        var allHierarchyDataFromAPI = await HierarchyService.__Get_All_Children_Hierarchy_By_GUID__Async(ProjectId);

        if (allHierarchyDataFromAPI != null)
        {

            foreach (var singleHierarchyDataFromAPI in allHierarchyDataFromAPI)
            {

                TreeItemData<Guid> _TWO_childTempTreeViewNode = new TreeItemData<Guid>{
                        Value= singleHierarchyDataFromAPI.RecordId
                        , Text= singleHierarchyDataFromAPI.Name
                        , Icon= (singleHierarchyDataFromAPI.RecordType.ToLower() == "itemztype" ? @Icons.Material.Filled.MenuBook :
                                                        singleHierarchyDataFromAPI.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel)
                        , Expandable= (singleHierarchyDataFromAPI.Children.Count() > 0 ? true : false)
                            ,
                        Children = new List<TreeItemData<Guid>>()
                };

                if (singleHierarchyDataFromAPI.Children.Count() > 0)
                {
                    _TWO_AddChildrens(_TWO_childTempTreeViewNode, singleHierarchyDataFromAPI.Children);
                }

                _projectHierarchyTreeNodes.FirstOrDefault()!.Children!.Add(_TWO_childTempTreeViewNode);
                //_projectHierarchyTreeNodes.Add(_TWO_childTempTreeViewNode);
            }

        }
        return _projectHierarchyTreeNodes;
        // _TWO_InitialTreeItems.Add(_TWO_tempTreeView);
    }
    protected async override void OnInitialized()
    {
        // Load initial data
        _TWO_InitialTreeItems = await LoadInitialData(ProjectId);
        StateHasChanged();

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load initial data
            Thread.Sleep(1000);
            _TWO_InitialTreeItems = await LoadAllProjectHierarchyData(ProjectId);

            // Fetch ItemzType Data
            // _ = LoadItemzTypesData(ProjectId);

            // await _TWO_TreeView.ExpandAllAsync();
            showLoadingMessage = false; 
            StateHasChanged();
        }
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {

    //         singleProject = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ProjectId);

          
    //         if (singleProject == null)
    //         {
    //             throw new ApplicationException($"No project record found for GUID {ProjectId}");
    //         }

    //         _TWO_TreeItemPresenter _TWO_tempTreeView = new _TWO_TreeItemPresenter
    //             (
    //                 value: singleProject.RecordId
    //                 , text: ("DADADADA" + singleProject.Name)
    //                 , icon: @Icons.Material.Filled.LocalFlorist
    //                 , expandable: true
    //             );
    //         _TWO_tempTreeView.Children = new();


    //         var allHierarchyDataFromAPI = await HierarchyService.__Get_All_Children_Hierarchy_By_GUID__Async(ProjectId);

    //         if (allHierarchyDataFromAPI != null)
    //         {
    //             foreach (var singleHierarchyDataFromAPI in allHierarchyDataFromAPI)
    //             {

    //                 _TWO_TreeItemPresenter _TWO_childTempTreeViewNode = new _TWO_TreeItemPresenter(
    //                     value: singleHierarchyDataFromAPI.RecordId
    //                     , text: singleHierarchyDataFromAPI.Name
    //                     , icon: (singleHierarchyDataFromAPI.RecordType.ToLower() == "itemztype" ? @Icons.Material.Filled.MenuBook :
    //                                                     singleHierarchyDataFromAPI.RecordType!.ToLower() == "itemz" ? @Icons.Material.Filled.Stream : @Icons.Material.Filled.Cancel)
    //                     , expandable: (singleHierarchyDataFromAPI.Children.Count() > 0 ? true : false)
    //                 );
    //                 _TWO_childTempTreeViewNode.Children = new();

    //                 if (singleHierarchyDataFromAPI.Children.Count() > 0)
    //                 {
    //                     _TWO_AddChildrens(_TWO_childTempTreeViewNode, singleHierarchyDataFromAPI.Children);
    //                 }

    //                 _TWO_tempTreeView.Children.Add(_TWO_childTempTreeViewNode);
    //             }

    //         }

    //         _TWO_InitialTreeItems.Add(_TWO_tempTreeView);

    //         StateHasChanged();
    //     }
    // }


    // // public async Task<IReadOnlyCollection<TreeItemData<Guid>>> _TWO_LoadServerDataFromItemzApi(Guid parentValue)
    // // {

    // //     foreach (var item in _TWO_InitialTreeItems)
    // //     {
    // //         if (item.Value == parentValue)
    // //             return item.Children;
    // //         if (!item.HasChildren)
    // //             continue;
    // //         var descendentItem = FindTreeItemData(parentValue, item);
    // //         if (descendentItem != null)
    // //             return descendentItem.Children;
    // //     }
    // //     return null;
    // // }

    // // private TreeItemData<Guid> FindTreeItemData(Guid value, TreeItemData<Guid> parent)
    // // {
    // //     foreach (var child in parent.Children)
    // //     {
    // //         if (child.Value == value)
    // //             return child;
    // //         if (!child.HasChildren)
    // //             continue;
    // //         var descendentItem = FindTreeItemData(value, child);
    // //         if (descendentItem != null)
    // //             return descendentItem;
    // //     }
    // //     return null;
    // // }

 }