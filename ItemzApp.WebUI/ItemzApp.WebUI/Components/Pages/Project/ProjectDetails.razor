@page "/projectDetails/{ProjectId:guid}"
@using ItemzApp.WebUI.Client.Services.Project
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService

<h1>Project Details</h1>
<br />

<MudGrid>
@* 	@if (deletingProject)
	{
	<MudPaper Height="calc(100vh - 100px);" Width="100%">
		<MudOverlay Visible="@deletingProject" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Deleting ...</MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudPaper>
	} *@
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
		<MudItem hidden="@hideValidationError" xs="12" sm="8">
			<MudPaper Class="pa-4 mud-height-full">
				<MudText Typo="Typo.subtitle2" Color="@Color.Error">@($"Validation Errors ({errors.Length})")</MudText>
				@foreach (var error in errors)
				{
					<MudText Color="@Color.Error">@error</MudText>
				}
			</MudPaper>
		</MudItem>
		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4">
				<MudForm Model="@singleProject" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" FieldChanged="formFieldChanged" >
			<MudCardContent>
				<MudText>Project GUID Id: @singleProject.Id.ToString()</MudText>
				<MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!"
								@bind-Value="singleProject.Name"
								For="@(() => singleProject.Name)" />
				<MudTextField T="string" Label="Status" Required="true" RequiredError="Status is required!"
					@bind-Value="singleProject.Status"
					For="@(() => singleProject.Status)" />
				<MudTextField T="string" Label="Description" Required="true" RequiredError="Description is required!"
					@bind-Value="singleProject.Description"
					For="@(() => singleProject.Description)" />
					</MudCardContent>
			<MudCardActions>
					<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(disableUpdateProjectDetailsButton)"
								   Size="Size.Large"
								   style="gap: 10px; margin : 10px"
								OnClick="(() => HandleProjectDetailsPatchSubmission())">
					<MudText>Save</MudText>
					</MudButton>
					@* <MudSpacer /> *@
					<MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Large" style="gap: 10px; margin-left : 10px"
						OnClick="(() => goBackToProject())">
						<MudText>Cancel</MudText>
					</MudButton>
			</MudCardActions>
				<MudItem xs="12" sm="12" md="12" lg="9">
					<br />
						<MudExpansionPanels Elevation="10" style="margin-left : 15px">
							<MudExpansionPanel style="background-color : #FABBBB; color : red;"
											   Text="DANGER ZONE!" MaxHeight="150" Expanded="false">
							<TitleContent>
								<div class="d-flex">
									<MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Medium" class="mr-3"></MudIcon>
									<MudText Color="Color.Error"><strong>DANGER ZONE!</strong></MudText>
								</div>
							</TitleContent>
							<ChildContent>
									<MudText Typo="Typo.body1" Color="Color.Error">Deleting project means loosing all it's data. This is <STRONG>IRREVERSIBLE</STRONG> operation.</MudText>
									<MudButton @onclick="OpenDeleteConfirmationDialogAsync" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" style="align-items: center; margin-top : 10px">
									Delete Project
								</MudButton>
							</ChildContent>
						</MudExpansionPanel>
					</MudExpansionPanels>
				</MudItem>
		</MudForm>

	</MudPaper>
	</MudItem>
	<MudItem xs="12" sm="8">
		<MudOverlay Visible="@updateProjectButtonClicked" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit"> Updating ...  </MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudItem>
	<MudItem xs="12" sm="8">
		<MudOverlay Visible="@deletingProject" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Deleting ...</MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudItem>
	}
</MudGrid>
@code {
	[Parameter]
	public Guid ProjectId { get; set; }

	[Inject]
	public IProjectService ProjectService { get; set; }

	// public Guid displayOnlyProjectID = Guid.Empty ;
	private bool showDeleteConfirmation = false;
	private bool updateProjectButtonClicked = false;

	public GetProjectDTO singleProject { get; set; } = new();
	public bool initializingPage { get; set; } = false;
	private bool deletingProject { get; set; } = false;
	private bool hasFormFieldChanged { get; set; } = false;

	//MudForm related fields
	bool success = true;
	bool disableUpdateProjectDetailsButton = false;
	string[] errors = { };
	MudForm form;

	// TODO START HERE BY CREATING INSTANCE OF ProjectExceptionDialog AND SHOWING IT WHEN ERROR GETS ENCOUNTERED. 

	bool hideValidationError = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleProject = await ProjectService.__Single_Project_By_GUID_ID__Async(ProjectId);
			if (form != null)
			{
				await form.Validate();
				if (form.IsValid)
				{
					disableUpdateProjectDetailsButton = false;
				}
				else
				{
					disableUpdateProjectDetailsButton = true;
				}
			}
			initializingPage = false;
			StateHasChanged();
		}
	}
	public async Task HandleProjectDetailsPatchSubmission()
	{
		updateProjectButtonClicked = true;
		try
		{
			if (hasFormFieldChanged)
			{
				var updatedResult = await ProjectService.__PUT_Update_Project_By_GUID_ID__Async(ProjectId, singleProject);
				Thread.Sleep(800);
			}
		}
		catch (Exception ex)
		{
			updateProjectButtonClicked = false;
			await OpenExceptionDialogAsync("Problem Updating Project Details : " + ex.Message);
			return;
		}
		goBackToProject();
		// IF IT UPDATES THE PROJECT THEN DISABLE SUBMIT BUTTON AND CONFIRM ON SCREEN THAT IT'S NOW UPDATED SUCCESSFULLY

	}

	private async Task formFieldChanged()
	{
		hasFormFieldChanged = true;
		if (form != null)
		{
			await form.Validate();
			if (form.IsValid)
			{
				disableUpdateProjectDetailsButton = false;
			}
			else
			{
				disableUpdateProjectDetailsButton = true;
			}
		}
	}

	public async Task deleteProject()
	{
		await ProjectService.__DELETE_Project_By_GUID_ID__Async(ProjectId);
		NavManager.NavigateTo("/projects");
	}
	private async Task OpenDeleteConfirmationDialogAsync()
	{
		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogref = await DialogService.ShowAsync<ProjectDeletionConfirmDialog>("CONFIRM", options);
		var dialogresult = await dialogref.Result;
		if (!(dialogresult!.Canceled))
		{
			deletingProject = true;
			StateHasChanged();
			await deleteProject();
			Thread.Sleep(200);
		}
	}

	private async Task OpenExceptionDialogAsync(string exceptionMessage)
	{
		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogPara = new DialogParameters();
		dialogPara.Add("exceptionMessage", exceptionMessage);
		var dialogref = await DialogService.ShowAsync<ProjectExceptionDialog>("CONFIRM", dialogPara, options);
		// var dialogresult = await dialogref.Result;
	}

	public void goBackToProject()
	{
		NavManager.NavigateTo($"/project/{ProjectId.ToString()}");
	}

}
