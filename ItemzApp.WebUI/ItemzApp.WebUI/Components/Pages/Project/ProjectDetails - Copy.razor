@page "/projectDetails-Copy/{ProjectId:guid}"
@using ItemzApp.WebUI.Client.Services.Project
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager

@* <script src="https://cdn.jsdeliver.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//E1J19smozuHV6z3Iehds+3U1b9Bn9p1x0x4" crossorigin="anonymous"></script> *@
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossorigin="anonymous">
</script>
<style>
	#rcorners1 {
		border-radius: 25px;
		background: #FFB0B0;
		padding: 20px;
		width: 300px;
		height: 250px;
	}
</style>

<h1>Project Details</h1>
@if (initializingPage)
{
	<MudPaper Height="calc(100vh - 100px);" Width="100%">
		<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading Project Details ...</MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudPaper>
}
else
{
	<EditForm Enhance Model="@singleProject" OnValidSubmit="HandleProjectDetailsPatchSubmission" FormName="update-Project">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<ValidationSummary></ValidationSummary>

	<div class="row">
		<div class="col-6">
@* 			<label>Project Id: @singleProject.IdAsString </label> *@
			<label>Project GUID Id: @singleProject.Id.ToString()</label>
			@* 			@if (displayOnlyProjectID != Guid.Empty)
			{
				<label>Project Id: @displayOnlyProjectID.ToString()</label>
			}
			else
			{
				<label>Project details could not be found for ID : @ProjectId.ToString()</label>
			}
 *@		</div>
	</div>
	<br />
	<div class="row">
		<div class="col-6">
			<label for="Name">Name:</label>
			@* <input id="Name" style="width: 100%;" @bind="singleProject.Name" @bind:event="oninput" /> *@
			<InputText id="Name" class="form-control" style="width: 100%;" @bind-Value="@singleProject.Name" />
		</div>
	</div>
	<br />
	<div class="row">
		<div class="col-6">
			<label for="Status">Status:</label>
			<InputText id="Status" class="form-control" style="width: 100%;" @bind-Value="@singleProject.Status"></InputText>
		</div>
	</div>
	<br />
	<div class="row">
		<div class="col-6">
			<label for="Description">Description:</label>
			<InputText id="Description" class="form-control" style="width: 100%;" @bind-Value="@singleProject.Description"></InputText>
		</div>
	</div>
	<br />
	<div class="row">
		<div class="col-3">
@* 			<button type="submit" class="btn btn-primary">Update Project Details</button> *@
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => HandleProjectDetailsPatchSubmission())">
				<MudText>Save</MudText>
			</MudButton>
		</div>
		<div class="col-3">
@* 			<button @onclick="goBackToProjects" type="button" class="btn btn-secondary">Cancel Updating Project</button> *@
				<MudButton Variant="Variant.Filled" OnClick="(() => goBackToProjects())">
					<MudText>Cancel</MudText>
			</MudButton>
		</div>
@* 		<div class="col-3">
			<button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#confirmProjectDeleteModal">Delete Project</button>
		</div>*@
	</div>
	<br />
	<div class="row">
		<p id="rcorners1">
			<b>DANGER ZONE! </b>
			<br />
			<br />
			Deleting project means loosing all it's data. 
			<br />
			<b> This is irreversable operation.</b>
			<br />
			<br />
			<button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#confirmProjectDeleteModal">Delete Project</button>
		</p>
	</div>
</EditForm>

<MudOverlay Visible="@updateProjectButtonClicked" DarkBackground="true" Absolute="true">
	<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Updating Project Details ...</MudText>
	<br />
	<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
</MudOverlay>

@if (showDeleteConfirmation)
{
@* 	<div class="confirmation-modal">
		<h2>Confirm Deletion</h2>
		<p> Are you sure you want to delete this Project?</p>
		<div>
			<button @onclick="deleteProject">Yes</button>
			<button @onclick="cancelProjectDeletion">No</button>
		</div>
	</div> *@
}

<!-- Modal -->
<div class="modal fade" id="confirmProjectDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmProjectDeleteModalLabel" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="confirmProjectDeleteModalLabel">Delete Project</h5>
				<button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<p>Please Confirm that you want to delete this Project!</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="deleteProject">Yes</button>
				<button type="button" class="btn btn-success" data-bs-dismiss="modal" autofocus>No</button>
			</div>
		</div>
	</div>
</div>
}
@code {
	[Parameter]
	public Guid ProjectId { get; set; }

	[Inject]
	public IProjectService ProjectService { get; set; }

	// public Guid displayOnlyProjectID = Guid.Empty ;
	private bool showDeleteConfirmation = false;
	private bool updateProjectButtonClicked = false;

	public GetProjectDTO singleProject { get; set; } = new();
	public bool initializingPage { get; set; } = false;


	// protected override async Task OnInitializedAsync()
	// {
	// 	initializingPage = true;
	// 	singleProject = await ProjectService.__Single_Project_By_GUID_ID__Async(ProjectId);
	// 	// if (singleProject != null)
	// 	// {
	// 	// 	displayOnlyProjectID = ProjectId;
	// 	// }

	// }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			// Thread.Sleep(1500);
			singleProject = await ProjectService.__Single_Project_By_GUID_ID__Async(ProjectId);
			initializingPage = false;
			StateHasChanged();
		}
	}


	public async Task HandleProjectDetailsPatchSubmission()
	{
		// var updateSingleProjectDTO = new UpdateProjectDTO();
		// updateSingleProjectDTO.Name = singleProject.Name;
		// updateSingleProjectDTO.Description = singleProject.Description;
		// updateSingleProjectDTO.Status = singleProject.Status;
		updateProjectButtonClicked = true;
		var updatedResult = await ProjectService.__PUT_Update_Project_By_GUID_ID__Async(ProjectId, singleProject);
		// updateProjectButtonClicked = false;
		Thread.Sleep(1500);
		NavManager.NavigateTo("/projects");

		// IF IT UPDATES THE PROJECT THEN DISABLE SUBMIT BUTTON AND CONFIRM ON SCREEN THAT IT'S NOW UPDATED SUCCESSFULLY

	}

	public void goBackToProjects()
	{
		NavManager.NavigateTo("/projects");
	}

	public async Task deleteConfirmation()
	{
		showDeleteConfirmation = true;
	}

	public async Task deleteProject()
	{
		await ProjectService.__DELETE_Project_By_GUID_ID__Async(ProjectId);
		showDeleteConfirmation = false;
		NavManager.NavigateTo("/projects");
	}

	public void cancelProjectDeletion()
	{
		showDeleteConfirmation = false;
	}
}
