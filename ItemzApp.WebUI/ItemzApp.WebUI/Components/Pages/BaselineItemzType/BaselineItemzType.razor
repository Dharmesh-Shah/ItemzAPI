@page "/baselineItemztype/{BaselineItemzTypeId:guid}"
@using ItemzApp.WebUI.Client.Services.BaselineHierarchy
@using ItemzApp.WebUI.Client.Services.BaselineItemzTypes
@using ItemzApp.WebUI.Client.Services.Baselines
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Client.SharedModels.BetweenPagesAndComponent
@using ItemzApp.WebUI.Components.FindServices
@using ItemzApp.WebUI.Components.Pages.Breadcrums
@using ItemzApp.WebUI.Components.Pages.Common
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization
@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject IFindProjectAndBaselineIdsByBaselineItemzIdService FindProjectAndBaselineIdsByBaselineItemzIdService
@inject IJSRuntime JS

@if (BreadcrumsParameter != null)
{
	<BaselineBreadcrums produceBreadcrums="BreadcrumsParameter" />
}

<MudPaper Class="pa-4 mb-3 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h6" Align="Align.Left">Baseline ItemzType</MudText>
</MudPaper>

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
 		<MudItem xs="12" sm="12">
			<MudCard style="background-color : #FABBBB;" >
				<MudCardContent>
				<MudItem Class="align-start d-flex" Style="width: auto" Outlined="false">
					<MudGrid>
						<MudItem xs="12" sm="12" md="7" lg="7">
							<MudText Typo="Typo.h5" Align="Align.Left"><strong>@singleIBaselineItemzType.Name </strong></MudText>
						</MudItem>
						<MudItem xs="12" sm="12" md="5" lg="5">
							<MudStack Row="true" Spacing="2" AlignItems="AlignItems.End" Justify="Justify.FlexEnd" Class="w-100">
								<MudButton OnClick="async _ => await openBaselineTreeView(BaselineItemzTypeId)" Variant="@Variant.Filled" Size="@Size.Medium" Color="@Color.Success" Target="_blank"> TreeView </MudButton>
								<MudButton OnClick="goBackToBaseline" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Warning" style="gap: 10px; margin-left : 10px"> Go Back </MudButton>
							</MudStack>
						</MudItem>
					</MudGrid>
				</MudItem>
					</MudCardContent>
				</MudCard>
				<MudCard>
					<MudCardContent>
					<MudStack Row="true" Spacing="2">
						<MudText><strong>ID           : </strong></MudText>
						<CopyableText TextToCopy="@singleIBaselineItemzType.Id.ToString()" />
					</MudStack>
					<MudText><strong>Status       : </strong> @singleIBaselineItemzType.Status</MudText>
					<MudText><strong>Is System?   : </strong> @(singleIBaselineItemzType.IsSystem ? "Yes" : "No") </MudText>
					<MudText><strong>Created Date : </strong> @singleIBaselineItemzType.CreatedDate.ToString("dd MMM yyyy HH:mm:ss", CultureInfo.CurrentCulture)</MudText>
					<MudText><strong>Description : </strong></MudText>
					<br />
					<div class="custom-markdown-editor">
						<MudPaper Class="pa-2 fixed-height-scroll">
							@if (!string.IsNullOrEmpty(singleIBaselineItemzType.Description))
							{
								<div class="markdown-body">@((MarkupString)convertedMarkdown)</div>
							}
						</MudPaper>
					</div>
				</MudCardContent>
			</MudCard>
		</MudItem>
 		<MudItem xs="12" sm="12">
			<MudPaper Class="pa-4 mb-3 align-start d-flex" Style="width: auto" Outlined="false">
				<MudText Typo="Typo.h6" Align="Align.Left">@((MarkupString)("Baseline Itemz &nbsp;&nbsp;"))</MudText>
				<MudChip T="string" Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" Color="Color.Primary"> @AllBaselineItemzForBaselineItemzType.Count().ToString()</MudChip>
			</MudPaper>
			<MudDataGrid Class="pa-4 mb-3" Items="@AllBaselineItemzForBaselineItemzType" 
						Filterable="true" 
						SortMode="@SortMode.None" 
						Groupable="false" 
						Striped="true" 
						FixedHeader="true" 
						HeaderClass="background-color: red;">
				<Columns>
					<PropertyColumn Property="x => x.RecordId" Title="Record Id">
						<CellTemplate>
							<CopyableText TextToCopy="@context.Item.RecordId.ToString()" DisplayLength="8" />
						</CellTemplate>
					</PropertyColumn>
					<PropertyColumn Property="x => x.IsIncluded">
						<CellTemplate>
							@if (context.Item.IsIncluded == true) // I don't know why true is actually false when it comes to MudIcon logic below.
							{
								<MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Medium"></MudIcon>
							}
							else
							{
								<MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Medium"></MudIcon>
							}
						</CellTemplate>
					</PropertyColumn>

					<PropertyColumn Property="x => x.Name" />
					<PropertyColumn Property="x => x.NumberOfChildNodes" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
 					<TemplateColumn Title="Action" >
						<CellTemplate>
							<div style="display: flex; justify-content: left; align-items: center; gap: 10px;">
							<MudButton Size="@Size.Medium"
								Variant="@Variant.Filled" Color="@Color.Success" 
								OnClick="_ => openBaselineItemz(context.Item.RecordId.ToString())"> Open </MudButton>
							</div>
						</CellTemplate>
					</TemplateColumn>
				</Columns>
			</MudDataGrid>
 		</MudItem>
	}
</MudGrid>
@code {
	[Parameter]
	public Guid BaselineItemzTypeId { get; set; }
	[Parameter]
	public Guid ParentId { get; set; }

	[Inject]
	public IBaselinesService baselineService { get; set; }

	[Inject]
	public IBaselineItemzTypesService baselineItemzTypesService { get; set; }

	[Inject]
	public IBaselineHierarchyService baselineHierarchyService { get; set; }


	public GetBaselineItemzTypeDTO singleIBaselineItemzType { get; set; } = new();
	private List<BaselineHierarchyIdRecordDetailsDTO> AllBaselineItemzForBaselineItemzType { get; set; } = new List<BaselineHierarchyIdRecordDetailsDTO>();
	private ParameterForBaselineBreadcrums BreadcrumsParameter;
	public bool initializingPage { get; set; } = true;

	private MarkupString convertedMarkdown;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleIBaselineItemzType = await baselineItemzTypesService.__Single_BaselineItemzType_By_GUID_ID__Async(BaselineItemzTypeId);

			// TODO :: THROW EXCEPTION IF BASELINE ITEMTYPE IS NOT FOUND!

			if (singleIBaselineItemzType != null)
			{
				BreadcrumsParameter = new ParameterForBaselineBreadcrums();
				BreadcrumsParameter.Id = singleIBaselineItemzType.Id;
				BreadcrumsParameter.Name = singleIBaselineItemzType.Name;
				BreadcrumsParameter.RecordType = "baselineitemztype"; // TODO :: USE CONSTANT
				BreadcrumsParameter.isIncluded = true ; // TODO :: WE SET INCLUSION FOR BASELINEITEMZTYPE TO TRUE BUT WE CAN DO BETTER
			}

			var returnedItemzList = await baselineHierarchyService.__Get_Immediate_Children_Baseline_Hierarchy_By_GUID__Async(BaselineItemzTypeId);

			if (returnedItemzList != null)
			{
				AllBaselineItemzForBaselineItemzType = returnedItemzList.ToList();
			}

			initializingPage = false;

			// EXPLANATION : At the start of initialization process we capture parent record ID.
			// Now even if user decides to Delete this Itemz Record then also we can go back to it's
			// Parent post completing deletion operation.
			var httpResponse = await baselineHierarchyService.__Get_BaselineHierarchy_Record_Details_By_GUID__Async(BaselineItemzTypeId);
			ParentId = httpResponse.ParentRecordId;

			await ConvertMarkdownToHtml(singleIBaselineItemzType.Description);
			StateHasChanged();
			//StateHasChanged();
		}
	}

	public async Task openBaselineItemz(string Id)
	{
		NavManager.NavigateTo($"/baselineitemz/{Id}");
	}

	public void goBackToBaseline()
	{
		NavManager.NavigateTo($"/baseline/{ParentId.ToString()}");
	}

	public async Task openBaselineTreeView(Guid Id)
	{
		// TODO :: Similar Code is there in ProjectTreeView.razor file as well.
		// We should try and come up with some common way to handle it!

		var foundProjectAndBaselineIds = await FindProjectAndBaselineIdsByBaselineItemzIdService.GetProjectAndBaselineId(Id);
		if (foundProjectAndBaselineIds.BaselineId != Guid.Empty)
		{
			var url = $"/BaselineTreeView/{foundProjectAndBaselineIds.BaselineId}?autoSelectedRecordId={Id}";
			await JS.InvokeVoidAsync("openInNewTab", url);
		}
	}

	private async Task ConvertMarkdownToHtml(string markdown)
	{
		if (!string.IsNullOrEmpty(markdown))
		{
			var html = await JS.InvokeAsync<string>("markdownToHtml", markdown);
			convertedMarkdown = (MarkupString)html;
			StateHasChanged();

			// Apply fullscreen styles
			// await Task.Delay(1000);
			// await JS.InvokeVoidAsync("applyMarkdownEditorFullscreenStyles");
		}
	}

}
