@page "/itemzDetails/{ItemzId:guid}"
@using ItemzApp.WebUI.Client.Services.Hierarchy
@using ItemzApp.WebUI.Client.Services.Itemz
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Components.Pages.Traceability
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService

<h1>Itemz Details</h1>
<br />

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
		<MudContainer MaxWidth="MaxWidth.ExtraLarge">
		<MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true"
				 ApplyEffectsToContainer="true" PanelClass="pa-12" MinimumTabWidth="300px" >
			<MudTabPanel Text="Details" Icon="@Icons.Material.Filled.EditNote" >
				@if (errors.Length > 0)
				{
					<MudPaper Class="pa-4 mud-height-full mud-width-full">
						<MudText Typo="Typo.subtitle2" Color="@Color.Error">@($"Validation Errors ({errors.Length})")</MudText>
						@foreach (var error in errors)
						{
							<MudText Color="@Color.Error">@error</MudText>
						}
					</MudPaper>
				}
				@* <MudItem xs="12" sm="12" md="12" lg="12"> *@
					<MudPaper Class="pa-4 mud-height-full" Width="100%">
				<MudForm Model="@singleItemz" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" FieldChanged="formFieldChanged" >
			<MudCardContent>
				<MudText>Itemz GUID Id: @ItemzId.ToString()</MudText>
				<br />
				<MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!"
					@bind-Value="singleItemz.Name"
					For="@(() => singleItemz.Name)" FullWidth="true" />
				<MudSelect @bind-Value="singleItemz.Status"
							For="@(() => singleItemz.Status)"
							Required="true"
							RequiredError="Status is required!"
							Label="Status">
					@foreach (var _stringItemzStatusValue in _stringItemzStatusValues)
					{
						<MudSelectItem T="string" Value="_stringItemzStatusValue">@_stringItemzStatusValue</MudSelectItem>
					}
				</MudSelect>
				<MudSelect @bind-Value="singleItemz.Priority"
							For="@(() => singleItemz.Priority)"
							Required="true"
							RequiredError="Priority is required!"
							Label="Priority">
					@foreach (var _stringItemzPriorityValue in _stringItemzPriorityValues)
					{
						<MudSelectItem T="string" Value="_stringItemzPriorityValue">@_stringItemzPriorityValue</MudSelectItem>
					}
				</MudSelect>
				<MudTextField T="string" Label="Description" Required="true" RequiredError="Description is required!"
					@bind-Value="singleItemz.Description"
					For="@(() => singleItemz.Description)" />
				<MudSelect @bind-Value="singleItemz.Severity"
							For="@(() => singleItemz.Severity)"
							Required="true"
							RequiredError="Severity is required!"
							Label="Severity">
					@foreach (var _stringItemzSeverityValue in _stringItemzSeverityValues)
					{
						<MudSelectItem T="string" Value="_stringItemzSeverityValue">@_stringItemzSeverityValue</MudSelectItem>
					}
				</MudSelect>
			</MudCardContent>
			<MudCardActions>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(disableUpdateItemzDetailsButton)"
					Size="Size.Large"
					style="gap: 10px; margin : 10px"
					OnClick="(() => HandleItemzDetailsPatchSubmission())">
				<MudText>Save</MudText>
				</MudButton>
				<MudButton Variant="Variant.Filled" Color="Color.Warning" 
					Size="Size.Large" style="gap: 10px; margin-left : 10px"
					OnClick="(async () => await goBackToItemz())">

					<MudText>Cancel</MudText>
				</MudButton>
			</MudCardActions>

				<MudItem xs="12" sm="12" md="12" lg="9">
					<br />
						<MudExpansionPanels Elevation="10" style="margin-left : 15px">
							<MudExpansionPanel style="background-color : #FABBBB; color : red;"
								Text="DANGER ZONE!" MaxHeight="150" Expanded="false">
							<TitleContent>
								<div class="d-flex">
									<MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Medium" class="mr-3"></MudIcon>
									<MudText Color="Color.Error"><strong>DANGER ZONE!</strong></MudText>
								</div>
							</TitleContent>
							<ChildContent>
									<MudText Typo="Typo.body1" Color="Color.Error">Deleting Itemz means loosing all it's data. This is <STRONG>IRREVERSIBLE</STRONG> operation.</MudText>
									<MudButton @onclick="OpenDeleteConfirmationDialogAsync" Variant="Variant.Filled"
										Disabled="@(disableUpdateItemzDetailsButton)"
										Color="Color.Error" Size="Size.Large" style="align-items: center; margin-top : 10px">

									Delete Itemz
								</MudButton>
							</ChildContent>
						</MudExpansionPanel>
					</MudExpansionPanels>
				</MudItem>
		</MudForm>
	</MudPaper>
	@* </MudItem> *@
			</MudTabPanel>
			<MudTabPanel Icon="@Icons.Material.Filled.Hub" Text="Treaceability">
				<MudItem xs="12" sm="12" md="12" lg="12">
					<MudPaper Class="pa-4 mud-height-full" Width="100%">
						<TraceabilityComponent ItemzId="@ItemzId" />
					</MudPaper>
				</MudItem>
			</MudTabPanel>
		</MudTabs>
		</MudContainer>
	<MudItem xs="12" sm="8">
		<MudOverlay Visible="@updateItemzButtonClicked" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit"> Updating ...  </MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudItem>
	<MudItem xs="12" sm="8">
		<MudOverlay Visible="@deletingItemz" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Deleting ...</MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudItem>

	}
</MudGrid>
@code {
	[Parameter]
	public Guid ItemzId { get; set; }

	[Inject]
	public IItemzService ItemzService { get; set; }
	[Inject]
	public IHierarchyService hierarchyService { get; set; }

	private Guid ParentId { get; set; }
	private string ParentRecordType { get; set; }

	private bool updateItemzButtonClicked = false;
	public GetItemzDTO singleItemz { get; set; } = new();
	public bool initializingPage { get; set; } = false;
	private bool deletingItemz { get; set; } = false;
	private bool hasFormFieldChanged { get; set; } = false;

	//MudForm related fields
	bool success = true;
	bool disableUpdateItemzDetailsButton = false;
	string[] errors = { };
	MudForm form;

	bool hideValidationError = true;

	string[] _stringItemzStatusValues = { };
	string[] _stringItemzPriorityValues = { };
	string[] _stringItemzSeverityValues = { };

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleItemz = await ItemzService.__Single_Itemz_By_GUID_ID__Async(ItemzId);
			if (form != null)
			{
				await form.Validate();
				if (form.IsValid)
				{
					disableUpdateItemzDetailsButton = false;
				}
				else
				{
					disableUpdateItemzDetailsButton = true;
				}

				// EXPLANATION :: First we create string list and then just call ToArray() for producing required string array
				List<string> tempStatusList = new List<string>();
				foreach (var _itemzStatusValue in Enum.GetValues<ItemzStatus>())
				{
					tempStatusList.Add(_itemzStatusValue.ToString().Trim());
				}
				_stringItemzStatusValues = tempStatusList.ToArray();

				// EXPLANATION :: First we create string list and then just call ToArray() for producing required string array
				List<string> tempPriorityList = new List<string>();
				foreach (var _itemzPriorityValue in Enum.GetValues<ItemzPriority>())
				{
					tempPriorityList.Add(_itemzPriorityValue.ToString().Trim());
				}
				_stringItemzPriorityValues = tempPriorityList.ToArray();

				// EXPLANATION :: First we create string list and then just call ToArray() for producing required string array
				List<string> tempSeverityList = new List<string>();
				foreach (var _itemzSeverityValue in Enum.GetValues<ItemzSeverity>())
				{
					tempSeverityList.Add(_itemzSeverityValue.ToString().Trim());
				}
				_stringItemzSeverityValues = tempSeverityList.ToArray();

				initializingPage = false;
				StateHasChanged();
			}

			// EXPLANATION : At the start of initialization process we capture parent record ID. 
			// Now even if user decides to Delete this Itemz Record then also we can go back to it's 
			// Parent ItemzType post completing deletion operation. 
			var httpResponse = await hierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ItemzId);
			ParentId = httpResponse.ParentRecordId;
			ParentRecordType = httpResponse.ParentRecordType;
		}
	}
	public async Task HandleItemzDetailsPatchSubmission()
	{
		updateItemzButtonClicked = true;
		try
		{
			if (hasFormFieldChanged)
			{
				var updateItemzDTO = new UpdateItemzDTO();
				updateItemzDTO.Name = String.IsNullOrEmpty(singleItemz.Name)? "" : singleItemz.Name;
				updateItemzDTO.Status = String.IsNullOrEmpty(singleItemz.Status) ? "" : singleItemz.Status;
				updateItemzDTO.Description = singleItemz.Description;
				updateItemzDTO.Priority = String.IsNullOrEmpty(singleItemz.Priority) ? "" : singleItemz.Priority;
				updateItemzDTO.Severity = String.IsNullOrEmpty(singleItemz.Severity) ? "" : singleItemz.Severity;
				await ItemzService.__PUT_Update_Itemz_By_GUID_ID__Async(ItemzId, updateItemzDTO);
				Thread.Sleep(800);
				await goBackToItemz();
			}
		}
		catch (Exception ex)
		{
			updateItemzButtonClicked = false;
			await OpenExceptionDialogAsync("Problem Updating Itemz Details : " + ex.Message);
			return;
		}
		await goBackToItemz();
	}

	private async Task formFieldChanged()
	{
		hasFormFieldChanged = true;
		if (form != null)
		{
			await form.Validate();
			if (form.IsValid)
			{
				disableUpdateItemzDetailsButton = false;
			}
			else
			{
				disableUpdateItemzDetailsButton = true;
			}
		}
	}

	public async Task deleteItemz()
	{
		await ItemzService.__DELETE_Itemz_By_GUID_ID__Async(ItemzId);
		await goBackToParent();
	}
	private async Task OpenDeleteConfirmationDialogAsync()
	{
		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogref = await DialogService.ShowAsync<ItemzDeletionConfirmDialog>("CONFIRM", options);
		var dialogresult = await dialogref.Result;
		if (!(dialogresult!.Canceled))
		{
			deletingItemz = true;
			StateHasChanged();
			await deleteItemz();
			Thread.Sleep(200);
		}
	}

	private async Task OpenExceptionDialogAsync(string exceptionMessage)
	{
		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogPara = new DialogParameters();
		dialogPara.Add("exceptionMessage", exceptionMessage);
		var dialogref = await DialogService.ShowAsync<ItemzExceptionDialog>("CONFIRM", dialogPara, options);
		// var dialogresult = await dialogref.Result;
	}

	public async Task goBackToItemz()
	{

		NavManager.NavigateTo($"/itemz/{ItemzId.ToString()}");
	}
	public async Task goBackToParent()
	{

		if (ParentRecordType.ToLower() == "itemztype")
		{
			NavManager.NavigateTo($"/itemztype/{ParentId.ToString()}");
		}
		else if (ParentRecordType.ToLower() == "itemz")
		{
			NavManager.NavigateTo($"/itemz/{ParentId.ToString()}");
		}
	}


}
