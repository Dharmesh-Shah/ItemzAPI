@page "/itemz/{ItemzId:guid}"
@using ItemzApp.WebUI.Client.Services.Hierarchy
@using ItemzApp.WebUI.Client.Services.Itemz
@using ItemzApp.WebUI.Client.Services.ItemzTypeItemzsService
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Client.SharedModels.BetweenPagesAndComponent
@using ItemzApp.WebUI.Components.EventServices
@using ItemzApp.WebUI.Components.FindServices
@using ItemzApp.WebUI.Components.Pages.Breadcrums
@using ItemzApp.WebUI.Components.Pages.Common
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject BreadcrumsService breadcrumsService
@inject IJSRuntime JS
@inject IServiceProvider serviceProvider

@if (BreadcrumsParameter != null)
{
	<ItemzBreadcrums produceBreadcrums="BreadcrumsParameter" />
}

<MudPaper Class="pa-4 mb-5 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h6" Align="Align.Left">Itemz</MudText>
</MudPaper>

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
	if (singleItemz != null)
	{
 		<MudItem xs="12" sm="12">
			<MudPaper Class="pa-4 mb-5">
			<MudCard style="background-color : #FABBBB;" >
				<MudCardContent>
				<MudItem Class="pa-1 align-start d-flex" Style="width: auto" Outlined="false">
					<MudGrid>
						<MudItem xs="12" sm="12" md="7" lg="7">
							<MudText Typo="Typo.h5" Align="Align.Left"><strong>@singleItemz.Name </strong></MudText>
						</MudItem>
						<MudItem xs="12" sm="12" md="5" lg="5">
							<MudStack Row="true" Spacing="2" AlignItems="AlignItems.End" Justify="Justify.FlexEnd" Class="w-100">
								<MudButton OnClick="async _ => await editItemzDetails(ItemzId.ToString())"
											Variant="Variant.Filled"
											Size="Size.Medium"
											Color="Color.Success">
									Edit Itemz
								</MudButton>
								@if (!(breadcrumsService.RequestIsOrphanStatus()))
								{
									<MudButton Variant="Variant.Filled"
												Size="Size.Medium"
												Color="Color.Success"
												OnClick="(() => HandleGoToTreeView())">
										TREE VIEW
									</MudButton>
								}
								<MudButton OnClick="goBackToParent" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Warning"> Go Back </MudButton>
							</MudStack>
						</MudItem>
					</MudGrid>
				</MudItem>
				<MudDivider Style="color: darkgray background-color: white; border-width: 2px; border-color: black; height: 2px; " />
				<br />
				<MudStack Row="true" Spacing="2" StretchItems="StretchItems.None" AlignItems="AlignItems.Start" Class="w-100">
					<MudStack Row="true" Spacing="2">
						<MudText><strong>ID          : </strong></MudText>
						<CopyableText TextToCopy="@singleItemz.Id.ToString()" DisplayLength="8" />
					</MudStack>
					<MudText><strong> || Status      : </strong> @singleItemz.Status</MudText>
					<MudText><strong> || Priority    : </strong> @singleItemz.Priority</MudText>
					<MudText><strong> || Severity    : </strong> @singleItemz.Severity</MudText>
				</MudStack>
				<MudText><strong>Description : </strong> @singleItemz.Description</MudText>
				</MudCardContent>
			</MudCard>
			</MudPaper>
		</MudItem>
		@if (!(breadcrumsService.RequestIsOrphanStatus()))
		{
 		<MudItem xs="12" sm="12">
			<MudPaper Class="pa-4 mb-5 align-start d-flex" Style="width: auto" Outlined="false">
				<MudText Typo="Typo.h6" Align="Align.Left">@((MarkupString)("Child Itemz &nbsp;&nbsp;"))</MudText>
				<MudChip T="string" Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" Color="Color.Primary"> @AllChildItemz.Count().ToString()</MudChip>
				<MudSpacer />
				<MudButton @onclick="async _ => await createNewItemz(ItemzId.ToString())" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Create Itemz </MudButton>
			</MudPaper>
			<MudDataGrid Items="@AllChildItemz" 
						Filterable="true" 
						SortMode="@SortMode.None" 
						Groupable="false" 
						Striped="true" 
						FixedHeader="true" 
						HeaderClass="background-color: red;">
				<Columns>
					<PropertyColumn Property="x => x.RecordId" Title="Record Id">
						<CellTemplate>
							<CopyableText TextToCopy="@context.Item.RecordId.ToString()" DisplayLength="8" />
						</CellTemplate>
					</PropertyColumn>
					<PropertyColumn Property="x => x.Name" />
					<PropertyColumn Property="x => x.NumberOfChildNodes" Title="Number of Child Itemz" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					<TemplateColumn Title="Action">
						<CellTemplate>
							<div style="display: flex; justify-content: left; align-items: center; gap: 10px;">
							<MudButton Size="@Size.Large"
								Variant="@Variant.Filled" Color="@Color.Success"
									   OnClick="_ => openItemz(context.Item.RecordId.ToString())"> Open </MudButton>
							</div>
						</CellTemplate>
					</TemplateColumn>
					<TemplateColumn Title="Move Up or Down">
						<CellTemplate>
							<div style="display: flex; justify-content: left; align-items: center; gap: 10px;">
								<MudButton Size="@Size.Small"
										   Disabled="@(AllChildItemz.IndexOf(context.Item) == 0)"
										   Color="Color.Success" Variant="@Variant.Filled"
										   OnClick="async _ => await MoveUpAsync(context.Item.RecordId.ToString())">Up</MudButton>
								<MudButton Size="@Size.Small"
										   Disabled="@(AllChildItemz.IndexOf(context.Item) == AllChildItemz.Count - 1)"
										   Color="Color.Success" Variant="@Variant.Filled"
										   OnClick="async _ => await MoveDownAsync(context.Item.RecordId.ToString())">Down</MudButton>
							</div>
						</CellTemplate>
					</TemplateColumn>
				</Columns>
			</MudDataGrid>
 		</MudItem>
		}
	}
	}
</MudGrid>
@if (_showOverlay)
{
	<MudPaper Height="calc(100vh - 100px);" Width="100%">
		<MudOverlay Visible="@_showOverlay" DarkBackground="true" Absolute="true">
			<MudContainer Class="d-flex flex-column justify-center align-center" Style="height: 100%;">
				@* <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Moving ... </MudText>
			<br /> *@
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudContainer>
		</MudOverlay>
	</MudPaper>
}
@code {
	[Parameter]
	public Guid ItemzId { get; set; }

	[Inject]
	public IItemzService itemzService { get; set; }
	// [Inject]
	// public IItemzTypeItemzsService itemzTypeItemzsService { get; set; }
	[Inject]
	public IHierarchyService HierarchyService { get; set; }

	public GetItemzDTO singleItemz { get; set; } = new();
	private List<HierarchyIdRecordDetailsDTO> AllChildItemz { get; set; } = new List<HierarchyIdRecordDetailsDTO>();
	// private List<NestedHierarchyIdRecordDetailsDTO> AllParentHierarchy { get; set; } = new List<NestedHierarchyIdRecordDetailsDTO>();
	private ParameterForItemzBreadcrums BreadcrumsParameter;

	public bool initializingPage { get; set; } = true;
	public bool _showOverlay { get; set; } = false;

	private List<BreadcrumbItem> _localBreadcrumbs = new List<BreadcrumbItem>();
	// private NestedHierarchyIdRecordDetailsDTO _foundProjectRecord { get; set; }
	// private NestedHierarchyIdRecordDetailsDTO _foundItemzTypeRecord { get; set; }

	protected override async Task OnInitializedAsync()
	{
		initializingPage = true;
		StateHasChanged();
		//Thread.Sleep(300);
		singleItemz = await itemzService.__Single_Itemz_By_GUID_ID__Async(ItemzId);

		if (singleItemz != null)
		{
			BreadcrumsParameter = new ParameterForItemzBreadcrums();
			BreadcrumsParameter.Id = singleItemz.Id;
			BreadcrumsParameter.Name = singleItemz.Name;
			BreadcrumsParameter.RecordType = "itemz"; // TODO :: USE CONSTANT

			var returnedItemzList = await HierarchyService.__Get_Immediate_Children_Hierarchy_By_GUID__Async(ItemzId);

			if (returnedItemzList != null)
			{
				AllChildItemz = returnedItemzList.ToList();
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			await Task.Delay(200); // Wanted Breadcrums to load so that decision about displaying Child Itemz can be taken properly.
		}
		await InvokeAsync(StateHasChanged);
		initializingPage = false;
	}

	public async Task editItemzDetails(string itemzId)
	{
		NavManager.NavigateTo($"/itemzDetails/{itemzId}");
	}

	public async Task createNewItemz(string itemzTypeId)
	{

		var httpResponse = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ItemzId);

		if (httpResponse == null) // Orphand Itemz does not have Hierarchy Record
		{
			await DialogService.ShowMessageBox("ERROR", markupMessage: new
								MarkupString($"<p style=\"color: red; \">Looks like current Itemz is an Orphand Itemz and it can not contain Child Itemz.</p>"), yesText: "OK");
		}
		else
		{
			NavManager.NavigateTo($"/CreateItemz/{itemzTypeId}");
		}
	}

	public async Task openItemz(string itemzId)
	{
		NavManager.NavigateTo($"/itemz/{itemzId}",true);
	}

	public async Task goBackToParent()
	{
		// TODO: IT COULD BE ITEMZ OR ITEMZTYPE AS PARENT OF A GIVEN ITEMZ.

		// EXPLANATION : At the start of initialization process we capture parent record ID.
		// Now even if user decides to Delete this Itemz Record then also we can go back to it's
		// Parent ItemzType post completing deletion operation.
		var httpResponse = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ItemzId);

		if (httpResponse != null) // Orphand Itemz does not have Hierarchy Record
		{
			if (httpResponse.ParentRecordType.ToLower() == "itemztype")
			{
				NavManager.NavigateTo($"/itemztype/{httpResponse.ParentRecordId.ToString()}",true);
			}
			else if (httpResponse.ParentRecordType.ToLower() == "itemz")
			{
				NavManager.NavigateTo($"/itemz/{httpResponse.ParentRecordId.ToString()}",true);
			}
		}
		else
		{
			// Orphand Itemz when deleted then go back to Project's list.
			NavManager.NavigateTo($"/projects/");
		}
	}

	#region MOVE_Up_and_Down
	private async Task MoveUpAsync(string currentId)
	{
		var _totalRecordsInList = AllChildItemz.Count();

		var currentIndex = AllChildItemz.FindIndex(x => x.RecordId.ToString() == currentId);

		try
		{

			// EXPLANATION :: // 0,1,2,3,4,5 SO IF GAP HAS TWO POSSIBLE SPACES ABOVE CURRENT RECORD
			// Here the lowest currentIndex number has to be 2 and so we can move  2 between 0 & 1,
			// 3 between 1 & 2, 4 in between 2 & 3, so forth.
			_showOverlay = true;
			StateHasChanged();
			if (currentIndex > 1)
			{
				await itemzService.__POST_Move_Itemz_Between_Existing_Itemz__Async(
					movingItemzId: AllChildItemz[currentIndex].RecordId
					, firstItemzId: AllChildItemz[currentIndex - 2].RecordId
					, secondItemzId: AllChildItemz[currentIndex - 1].RecordId
				);
			}

			// EXPLANATION :: // 0,1,2,3,4,5 SO IF GAP HAS ONLY ONE ITEMZ ABOVE CURRENT LIST.
			// Here the currentIndex number will have to be 1 and so we can move  1 at position 0,
			// which is the top position.

			else if (currentIndex == 1)
			{
				await itemzService.__POST_Move_Itemz__Async(
					movingItemzId: AllChildItemz[currentIndex].RecordId
					, targetId: ItemzId
					, atBottomOfChildNodes: false
				);
			}
		}
		catch (Exception ex)
		{
			await DialogService.ShowMessageBox("ERROR", markupMessage: new
					MarkupString($"<p style=\"color: red; \">{ex.Message}</p>"), yesText: "OK");
			return;
		}
		finally
		{
			_showOverlay = false;
			StateHasChanged();
		}

		var previousIndex = currentIndex - 1;

		if (currentIndex > 0 && previousIndex >= 0)
		{
			var temp = AllChildItemz[currentIndex];
			AllChildItemz[currentIndex] = AllChildItemz[previousIndex];
			AllChildItemz[previousIndex] = temp;
		}
	}

	private async Task MoveDownAsync(string currentId)
	{

		var _totalRecordsInList = AllChildItemz.Count();

		var currentIndex = AllChildItemz.FindIndex(x => x.RecordId.ToString() == currentId);

		try
		{
			_showOverlay = true;
			StateHasChanged();
			// EXPLANATION :: 0,1,2,3,4 - Count 5  SO IF GAP HAS TWO POSSIBLE SPACES BELOW CURRENT RECORD.
			// Here the hieghest currentIndex number has to be 2 and so we can move  2 between 3 & 4,
			// 1 between 2 & 3, 0 in between 1 & 2, so forth.
			// Lets say currentIndex is 3 then (3 + 5 < 5) becomes false and so it will skip over if condition

			if (currentIndex + 2 < _totalRecordsInList)
			{
				await itemzService.__POST_Move_Itemz_Between_Existing_Itemz__Async(
					movingItemzId: AllChildItemz[currentIndex].RecordId
					, firstItemzId: AllChildItemz[currentIndex + 1].RecordId
					, secondItemzId: AllChildItemz[currentIndex + 2].RecordId
				);
			}
			// EXPLANATION 0,1,2,3,4 - Count 5 SO 3 IS THE ONLY VALUE THAT RETURNS TRUE IN THIS CASE.
			// 3 + 2 = 5 AND SO IF CONDITION EVALUATES TO TRUE.
			// if currentIndex is 3 then it will move it to bottom of the list at position 4.

			else if (currentIndex + 2 == _totalRecordsInList)
			{
				await itemzService.__POST_Move_Itemz__Async(
					movingItemzId: AllChildItemz[currentIndex].RecordId
					, targetId: ItemzId
					, atBottomOfChildNodes: true
				);
			}
		}
		catch (Exception ex)
		{
			await DialogService.ShowMessageBox("ERROR", markupMessage: new
					MarkupString($"<p style=\"color: red; \">{ex.Message}</p>"), yesText: "OK");
			return;
		}
		finally
		{
			_showOverlay = false;
			StateHasChanged();
		}

		var nextIndex = currentIndex + 1;

		if (currentIndex < AllChildItemz.Count - 1 && nextIndex >= 0)
		{
			var temp = AllChildItemz[currentIndex];
			AllChildItemz[currentIndex] = AllChildItemz[nextIndex];
			AllChildItemz[nextIndex] = temp;
		}
	}
	#endregion

	public async Task HandleGoToTreeView()
	{
		// TODO :: Similar Code is there in ProjectTreeView.razor file as well.
		// We should try and come up with some common way to handle it!

		var hierarchyService = serviceProvider.GetRequiredService<IHierarchyService>();
		var findProjectOfItemzId = new FindProjectOfItemzId(hierarchyService);

		var foundProjectId = await findProjectOfItemzId.getProjectIdOfItemzId(ItemzId);
		if (foundProjectId != Guid.Empty)
		{
			var url = $"/ProjectTreeView/{foundProjectId}?autoSelectedRecordId={ItemzId}";
			await JS.InvokeVoidAsync("openInNewTab", url);
		}
	}

}
