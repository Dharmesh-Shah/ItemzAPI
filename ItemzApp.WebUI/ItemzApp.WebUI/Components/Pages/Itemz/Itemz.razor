@page "/itemz/{ItemzId:guid}"
@using ItemzApp.WebUI.Client.Services.Hierarchy
@using ItemzApp.WebUI.Client.Services.Itemz
@using ItemzApp.WebUI.Client.Services.ItemzTypeItemzsService
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService

<h1>Itemz</h1>
<br />

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
 		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4">
			<MudCard style="background-color : #FABBBB;" >
				<MudCardContent>
					<MudItem Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
						<MudText Typo="Typo.h5" Align="Align.Left"><strong>@singleItemz.Name </strong></MudText>
						<MudSpacer />
						<MudButton OnClick="async _ => await editItemzDetails(ItemzId.ToString())" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Success"> Edit Itemz </MudButton>
							<MudButton OnClick="goBackToParent" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Warning" style="gap: 10px; margin-left : 10px"> Go Back </MudButton>
						</MudItem>
					<br />
					<MudDivider Style="color : black"   />
					<br />
					<MudText><strong>Itemz ID          : </strong> @singleItemz.Id.ToString()</MudText>
					<MudText><strong>Itemz Status      : </strong> @singleItemz.Status</MudText>
					<MudText><strong>Itemz Priority    : </strong> @singleItemz.Priority</MudText>
					<MudText><strong>Itemz Severity    : </strong> @singleItemz.Severity</MudText>
					<MudText><strong>Itemz Description : </strong> @singleItemz.Description</MudText>
				</MudCardContent>
			</MudCard>
			</MudPaper>
		</MudItem>
		<br />
 		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
				<MudText Typo="Typo.h4" Align="Align.Left">Itemz(s)</MudText>
				<MudSpacer />
				<MudButton @onclick="async _ => await createNewItemz(ItemzId.ToString())" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Create Itemz </MudButton>
			</MudPaper>
			<MudText>Total number of Child Itemz : @AllChildItemz.Count() </MudText>
			<MudDataGrid Items="@AllChildItemz" 
						Filterable="true" 
						SortMode="@SortMode.None" 
						Groupable="false" 
						Striped="true" 
						FixedHeader="true" 
						HeaderClass="background-color: red;">
				<Columns>
					<PropertyColumn Property="x => x.RecordId" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					<PropertyColumn Property="x => x.Name" />
					<PropertyColumn Property="x => x.NumberOfChildNodes" Title="Number of Child Itemz" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
 					<TemplateColumn CellClass="d-flex justify-left" >
						<CellTemplate>
							<MudButton Size="@Size.Large"
								Variant="@Variant.Filled" Color="@Color.Success"
									   OnClick="_ => openItemz(context.Item.RecordId.ToString())"> Open </MudButton>
						</CellTemplate>
					</TemplateColumn>
				</Columns>
			</MudDataGrid>
 		</MudItem>
	}
</MudGrid>
@code {
	[Parameter]
	public Guid ItemzId { get; set; }

	[Inject]
	public IItemzService itemzService { get; set; }
	// [Inject]
	// public IItemzTypeItemzsService itemzTypeItemzsService { get; set; }
	[Inject]
	public IHierarchyService HierarchyService { get; set; }


	public GetItemzDTO singleItemz { get; set; } = new();
	private List<HierarchyIdRecordDetailsDTO> AllChildItemz { get; set; } = new List<HierarchyIdRecordDetailsDTO>();
	public bool initializingPage { get; set; } = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleItemz = await itemzService.__Single_Itemz_By_GUID_ID__Async(ItemzId);

			//var returnedItemzList = await itemzTypeItemzsService.__GET_Itemzs_By_ItemzType__Async(ItemzTypeId,1,25,"Name");
			var returnedItemzList = await HierarchyService.__Get_Immediate_Children_Hierarchy_By_GUID__Async(ItemzId);

			if (returnedItemzList != null)
			{
				AllChildItemz = returnedItemzList.ToList();
			}

			initializingPage = false;

			StateHasChanged();
			//StateHasChanged();
		}
	}

	public async Task editItemzDetails(string itemzId)
	{
		NavManager.NavigateTo($"/itemzDetails/{itemzId}");
	}

	public async Task createNewItemz(string itemzTypeId)
	{
		NavManager.NavigateTo($"/CreateItemz/{itemzTypeId}");
	}

	public async Task openItemz(string itemzId)
	{
		NavManager.NavigateTo($"/itemz/{itemzId}",true);
	}


	public async Task goBackToParent()
	{
		// TODO: IT COULD BE ITEMZ OR ITEMZTYPE AS PARENT OF A GIVEN ITEMZ.

		// EXPLANATION : At the start of initialization process we capture parent record ID.
		// Now even if user decides to Delete this Itemz Record then also we can go back to it's
		// Parent ItemzType post completing deletion operation.
		var httpResponse = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ItemzId);

		if (httpResponse.ParentRecordType.ToLower() == "itemztype")
		{
			NavManager.NavigateTo($"/itemztype/{httpResponse.ParentRecordId.ToString()}",true);
		}
		else if (httpResponse.ParentRecordType.ToLower() == "itemz")
		{
			NavManager.NavigateTo($"/itemz/{httpResponse.ParentRecordId.ToString()}",true);
		}
	}
}
