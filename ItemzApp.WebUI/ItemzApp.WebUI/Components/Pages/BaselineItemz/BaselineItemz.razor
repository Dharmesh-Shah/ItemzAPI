@page "/baselineitemz/{BaselineItemzId:guid}"
@using ItemzApp.WebUI.Client.Services.BaselineHierarchy
@using ItemzApp.WebUI.Client.Services.BaselineItemz
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization
@inject NavigationManager NavManager
@inject IDialogService DialogService

<h1>Baseline Itemz</h1>
<br />

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
 		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4" >
			<MudCard style="background-color : #FABBBB;" >
				<MudCardContent>
					<MudItem Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
						<MudText Typo="Typo.h5" Align="Align.Left"><strong>@singleBaselineItemz.Name </strong></MudText>
						<MudSpacer />
						<MudButton OnClick="async _ => await openBaselineItemzDetails(BaselineItemzId.ToString())" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Success"> Open </MudButton>
						<MudButton OnClick="goBackToParent" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Warning" style="gap: 10px; margin-left : 10px"> Go Back </MudButton>
						</MudItem>
					<br />
					<MudDivider Style="color : black"   />
					<br />
					<MudText><strong>ID           : </strong> @singleBaselineItemz.Id.ToString()</MudText>
					<MudText><strong>Status       : </strong> @singleBaselineItemz.Status</MudText>
					<MudText><strong>Priority     : </strong> @singleBaselineItemz.Priority</MudText>
					<MudText><strong>Severity     : </strong> @singleBaselineItemz.Severity</MudText>
					<MudText><strong>Created Date : </strong> @singleBaselineItemz.CreatedDate.ToString("dd MMM yyyy HH:mm:ss", CultureInfo.CurrentCulture)</MudText>
					<MudGrid >
						<MudItem xs="3">
					<MudSwitch T="bool" 
						Value="@singleBaselineItemz.isIncluded"
						ValueChanged="OnSingleBaselineItemzInclusionChanged"
						Label="Is Included?"
						Size="Size.Large"
					    LabelPosition="LabelPosition.End"
					    Color="@(singleBaselineItemz.isIncluded ? Color.Success : Color.Error)"
						ThumbIconColor="@(singleBaselineItemz.isIncluded ? Color.Success : Color.Error)"
						UncheckedColor = "Color.Error"
						 />
						 </MudItem>

@* 						@if (singleBaselineItemz.isIncluded && AllChildBaselineItemz.Count() > 0 && anyChildBaselineItemzExcluded == true) *@
						@if (anyChildBaselineItemzExcluded == true)
						{
							<MudItem xs="6">
							<MudButton OnClick="async _ => await OnAllChildBaselineItemzInclusionChanged(true)" 
								Variant="Variant.Filled" 
								Size="Size.Medium" 
								Color="Color.Success" style="gap: 10px; margin-left : 10px"> Include All Child Baseline Itemz </MudButton>
							</MudItem>
@* 							<MudSwitch T="bool" 
							Value="false"
							ValueChanged="OnAllChildBaselineItemzInclusionChanged"
							Label="Include All Child Baseline Itemz?"
							Size="Size.Large"
							LabelPosition="LabelPosition.End" 
							Color="@(singleBaselineItemz.isIncluded ? Color.Success : Color.Error)"
							ThumbIconColor="@(singleBaselineItemz.isIncluded ? Color.Success : Color.Error)"
							UncheckedColor="Color.Error"
							/> *@
						}
					</MudGrid>
					<MudText><strong>Description  : </strong> @singleBaselineItemz.Description</MudText>
				</MudCardContent>
			</MudCard>
			</MudPaper>
		</MudItem>
		<br />
 		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
				<MudText Typo="Typo.h4" Align="Align.Left">Baseline Itemz</MudText>
			</MudPaper>
			<MudText>Total number of Child Baseline Itemz : @AllChildBaselineItemz.Count() </MudText>
			<MudDataGrid Items="@AllChildBaselineItemz" 
						Filterable="true" 
						SortMode="@SortMode.None" 
						Groupable="false" 
						Striped="true" 
						FixedHeader="true" 
						HeaderClass="background-color: red;">
				<Columns>
					<PropertyColumn Property="x => x.RecordId" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					@* 					<PropertyColumn Property="x => x.IsIncluded" /> *@
					<PropertyColumn Property="x => x.IsIncluded">
						<CellTemplate>
							@if (context.Item.IsIncluded == true) // I don't know why true is actually false when it comes to MudIcon logic below.
							{
								<MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Medium"></MudIcon>
							}
							else
							{
								<MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Medium"></MudIcon>
							}
						</CellTemplate>
					</PropertyColumn>

 					<PropertyColumn Property="x => x.Name" />
					<PropertyColumn Property="x => x.NumberOfChildNodes" Title="Number of Child Baseline Itemz" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
 					<TemplateColumn CellClass="d-flex justify-left" >
						<CellTemplate>
							<MudButton Size="@Size.Large"
								Variant="@Variant.Filled" Color="@Color.Success"
									   OnClick="_ => openBaselineItemz(context.Item.RecordId.ToString())"> Open </MudButton>
						</CellTemplate>
					</TemplateColumn>
				</Columns>
			</MudDataGrid>
 		</MudItem>
	}
</MudGrid>
@code {
	[Parameter]
	public Guid BaselineItemzId { get; set; }

	[Inject]
	public IBaselineItemzService baselineItemzService { get; set; }

	[Inject]
	public IBaselineHierarchyService baselineHierarchyService { get; set; }


	public GetBaselineItemzDTO singleBaselineItemz { get; set; } = new();
	private List<BaselineHierarchyIdRecordDetailsDTO> AllChildBaselineItemz { get; set; } = new List<BaselineHierarchyIdRecordDetailsDTO>();
	public bool initializingPage { get; set; } = true;
	public bool anyChildBaselineItemzExcluded { get; set; } = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleBaselineItemz = await baselineItemzService.__Single_BaselineItemz_By_GUID_ID__Async(BaselineItemzId);

			//var returnedItemzList = await itemzTypeItemzsService.__GET_Itemzs_By_ItemzType__Async(ItemzTypeId,1,25,"Name");
			var returnedItemzList = await baselineHierarchyService.__Get_Immediate_Children_Baseline_Hierarchy_By_GUID__Async(BaselineItemzId);

			if (returnedItemzList != null)
			{
				AllChildBaselineItemz = returnedItemzList.ToList();
			}

			foreach (var _childBaselineItemz in AllChildBaselineItemz)
			{
				if (_childBaselineItemz.IsIncluded == false)
				{
					anyChildBaselineItemzExcluded = true;
				}
			}

			initializingPage = false;

			StateHasChanged();
			//StateHasChanged();
		}
	}

	public async Task openBaselineItemzDetails(string Id)
	{
		NavManager.NavigateTo($"/baselineitemzdetails/{Id}", true);
	}

	public async Task openBaselineItemz(string Id)
	{
		NavManager.NavigateTo($"/baselineitemz/{Id}", true);
	}

	public async Task goBackToParent()
	{
		// TODO: IT COULD BE BASELINE ITEMZ OR BASELINE ITEMZTYPE AS PARENT OF A GIVEN BASELINE ITEMZ.

		// EXPLANATION : At the start of initialization process we capture parent record ID.
		// Now even if user decides to Delete this Itemz Record then also we can go back to it's
		// Parent ItemzType post completing deletion operation.
		var httpResponse = await baselineHierarchyService.__Get_BaselineHierarchy_Record_Details_By_GUID__Async(BaselineItemzId);

		if (httpResponse.ParentRecordType.ToLower() == "baselineitemztype") // TODO :: USE GLOBAL CONSTANTS
		{
			NavManager.NavigateTo($"/baselineitemztype/{httpResponse.ParentRecordId.ToString()}",true);
		}
		else if (httpResponse.ParentRecordType.ToLower() == "baselineitemz") // TODO :: USE GLOBAL CONSTANTS
		{
			NavManager.NavigateTo($"/baselineitemz/{httpResponse.ParentRecordId.ToString()}",true);
		}
	}

	private async Task OnSingleBaselineItemzInclusionChanged(bool newValue)
	{

		UpdateBaselineItemzDTO tempUpdateBaselineItemzDTO = new UpdateBaselineItemzDTO();
		// TODO :: Get Baseline ID from the server.
		tempUpdateBaselineItemzDTO.BaselineId = Guid.Parse("412f4a87-0b75-4631-958d-e2e92ea8e2fd");
		// tempUpdateBaselineItemzDTO.BaselineItemzIds = new List<Guid> { Guid.Parse(singleBaselineItemz.Id.ToString()) };
		tempUpdateBaselineItemzDTO.BaselineItemzIds = new List<Guid> { singleBaselineItemz.Id };
		tempUpdateBaselineItemzDTO.ShouldBeIncluded = newValue;
		tempUpdateBaselineItemzDTO.SingleNodeInclusion = true;
		// Send the new value to the server

		// TODO :: EXCEPTION HANDLING.
		await baselineItemzService.__PUT_Update_BaselineItemzs_By_GUID_IDs__Async(tempUpdateBaselineItemzDTO);
		NavManager.NavigateTo($"/baselineitemz/{BaselineItemzId.ToString()}", true);
//		singleBaselineItemz.isIncluded = newValue; // Update the previous value on success
	}

	private async Task OnAllChildBaselineItemzInclusionChanged(bool newValue)
	{
		UpdateBaselineItemzDTO tempUpdateBaselineItemzDTO = new UpdateBaselineItemzDTO();
		// TODO :: Get Baseline ID from the server.
		tempUpdateBaselineItemzDTO.BaselineId = Guid.Parse("412f4a87-0b75-4631-958d-e2e92ea8e2fd");
		// tempUpdateBaselineItemzDTO.BaselineItemzIds = new List<Guid> { Guid.Parse(singleBaselineItemz.Id.ToString()) };
		tempUpdateBaselineItemzDTO.BaselineItemzIds = new List<Guid> { singleBaselineItemz.Id };
		tempUpdateBaselineItemzDTO.ShouldBeIncluded = true;
		tempUpdateBaselineItemzDTO.SingleNodeInclusion = false;
		// Send the new value to the server

		// TODO :: EXCEPTION HANDLING.
		await baselineItemzService.__PUT_Update_BaselineItemzs_By_GUID_IDs__Async(tempUpdateBaselineItemzDTO);
		NavManager.NavigateTo($"/baselineitemz/{BaselineItemzId.ToString()}", true);
		//		singleBaselineItemz.isIncluded = newValue; // Update the previous value on success
	}

}
