@using ItemzApp.WebUI.Client.SharedModels
@* @using ItemzApp.WebUI.Client.Services.BaselineItemz *@
@using ItemzApp.WebUI.Client.Services.BaselineItemzCollection
@using ItemzApp.WebUI.Client.Services.BaselineItemzTrace;
@using ItemzApp.WebUI.Components.Pages.Common
@inject NavigationManager NavManager
@inject IDialogService DialogService

@* <h5>Traceability Component</h5>
<br /> *@
<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h6" Align="Align.Left"> <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowUp" /> Parent / From Baseline Traces </MudText>
</MudPaper>
<MudDataGrid Items="@AllParentBaselineItemzTraces"
			 Filterable="true"
			 SortMode="@SortMode.None"
			 Groupable="false"
			 Striped="true"
			 FixedHeader="true"
			 HeaderClass="background-color: red;">
	<Columns>
		<PropertyColumn Property="x => x.Id" Title="Id" Filterable="false">
			<CellTemplate>
				<CopyableText TextToCopy="@context.Item.Id.ToString()" DisplayLength="8" />
			</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.isIncluded">
			<CellTemplate>
				@if (context.Item.isIncluded == true) // I don't know why true is actually false when it comes to MudIcon logic below.
				{
					<MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Medium"></MudIcon>
				}
				else
				{
					<MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Medium"></MudIcon>
				}
			</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.Name" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
		<PropertyColumn Property="x => x.Status" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
		<PropertyColumn Property="x => x.Priority" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
		<TemplateColumn Title="Action">
			<CellTemplate>
				<div style="display: flex; justify-content: left; align-items: center; gap: 10px;">
				<MudButton Size="@Size.Large"
						   Variant="@Variant.Filled" Color="@Color.Success"
						   OnClick="_ => openBaselineItemz(context.Item.Id.ToString())"> Open </MudButton>
				</div>
			</CellTemplate>
		</TemplateColumn>
	</Columns>
</MudDataGrid>
<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h6" Align="Align.Left"><MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowDown" />Child / To Traces </MudText>
</MudPaper>
<MudDataGrid Items="@AllChildBaselineItemzTraces"
			 Filterable="true"
			 SortMode="@SortMode.None"
			 Groupable="false"
			 Striped="true"
			 FixedHeader="true"
			 HeaderClass="background-color: red;">
	<Columns>
		<PropertyColumn Property="x => x.Id" Title="Id" Filterable="false">
			<CellTemplate>
				<CopyableText TextToCopy="@context.Item.Id.ToString()" DisplayLength="8" />
			</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.isIncluded">
			<CellTemplate>
				@if (context.Item.isIncluded == true) // I don't know why true is actually false when it comes to MudIcon logic below.
				{
					<MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Medium"></MudIcon>
				}
				else
				{
					<MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Medium"></MudIcon>
				}
			</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.Name" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
		<PropertyColumn Property="x => x.Status" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
		<PropertyColumn Property="x => x.Priority" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
		<TemplateColumn CellClass="d-flex justify-left">
			<CellTemplate>
				<MudButton Size="@Size.Large"
						   Variant="@Variant.Filled" Color="@Color.Success"
						   OnClick="_ => openBaselineItemz(context.Item.Id.ToString())"> Open </MudButton>
			</CellTemplate>
		</TemplateColumn>
	</Columns>
</MudDataGrid>

@code {
	[Parameter]
	public Guid BaselineItemzId { get; set; }

	[Inject]
	public IBaselineItemzTraceService baselineItemzTraceService { get; set; }
	// [Inject]
	// public IBaselineItemzService baselinesItemzService { get; set; }
	[Inject]
	public IBaselineItemzCollectionService baselineItemzCollectionService { get; set; }

	


	private BaselineItemzParentAndChildTraceDTO SingleBaselineItemzTraces { get; set; } = new BaselineItemzParentAndChildTraceDTO();
	private ICollection<GetBaselineItemzDTO> AllParentBaselineItemzTraces { get; set; } = new List<GetBaselineItemzDTO>();
	private ICollection<GetBaselineItemzDTO> AllChildBaselineItemzTraces { get; set; } = new List<GetBaselineItemzDTO>();


	protected override async Task OnInitializedAsync()
	{
		var SingleBaselineItemzTraces = await baselineItemzTraceService.__GET_All_Parent_and_Child_Baseline_Itemz_Traces_By_BaselineItemzID__Async(BaselineItemzId);

		if (SingleBaselineItemzTraces != null)
		{
			if (SingleBaselineItemzTraces.BaselineItemz != null)
			{
				if (SingleBaselineItemzTraces.BaselineItemz.ParentBaselineItemz != null)
				{
					List<Guid> tempParentBaselineItemzIds = new List<Guid>();

					tempParentBaselineItemzIds = SingleBaselineItemzTraces.BaselineItemz.ParentBaselineItemz.Select(p => p.BaselineItemzID).ToList();

					AllParentBaselineItemzTraces = await baselineItemzCollectionService.__GET_BaselineItemz_Collection_By_GUID_IDS__Async(tempParentBaselineItemzIds);

					// AllParentItemzTraces = SingleItemzTraces.Itemz.ParentItemz;
				}
				if (SingleBaselineItemzTraces.BaselineItemz.ChildBaselineItemz != null)
				{
					List<Guid> tempChildBaselineItemzIds = new List<Guid>();

					tempChildBaselineItemzIds = SingleBaselineItemzTraces.BaselineItemz.ChildBaselineItemz.Select(p => p.BaselineItemzID).ToList();

					AllChildBaselineItemzTraces = await baselineItemzCollectionService.__GET_BaselineItemz_Collection_By_GUID_IDS__Async(tempChildBaselineItemzIds);

					// AllChildItemzTraces = SingleItemzTraces.Itemz.ChildItemz;
				}
			}
		}
		StateHasChanged();
	}

	public async Task openBaselineItemz(string baselineItemzId)
	{
		NavManager.NavigateTo($"/baselineItemzDetails/{baselineItemzId}", true);
	}

}
