@page "/orphanitemz"
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Client.Services.Itemz
@using System.Text.Json
@using ItemzApp.WebUI.Components.Pages.Common

<MudPaper Class="pa-3 mb-3 align-start d-flex" Style="width: auto " Outlined="false">
    <MudStack Row="true" Spacing="3">
        <MudIcon Icon="@Icons.Material.Filled.HolidayVillage" Size="Size.Large" />
        <MudText Typo="Typo.h6" Align="Align.Left">Orphaned Itemz </MudText>
        <MudChip T="string" Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" Color="Color.Primary"> @(totalItemzs < 0 ? "0" : totalItemzs.ToString()) </MudChip>
    </MudStack>
</MudPaper>

<MudTable @ref="mudTable"
          ServerData="LoadServerData"
          Items="@itemzs"
          RowsPerPage="@rowsPerPage"
          RowsPerPageChanged="OnRowsPerPageChanged">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Priority</MudTh>
        <MudTh>Severity</MudTh>
        <MudTh>Created Date</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id"><CopyableText TextToCopy="@context.Id.ToString()" /></MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Priority">@context.Priority</MudTd>
        <MudTd DataLabel="Severity">@context.Severity</MudTd>
        <MudTd DataLabel="Created Date">@context.CreatedDate.ToString("yyyy-MM-dd")</MudTd>
    </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Inject]
    public IItemzService itemzService { get; set; }

    private MudTable<GetItemzWithBasePropertiesDTO> mudTable;
    private int totalItemzs = 0;
    private int rowsPerPage = 10;
    private List<GetItemzWithBasePropertiesDTO> itemzs = new();

    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Initialization logic here
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        // Load initial data and set up initial state
        await LoadServerData(new TableState { Page = 0, PageSize = rowsPerPage }, CancellationToken.None);
    }

    private async Task<TableData<GetItemzWithBasePropertiesDTO>> LoadServerData(TableState state, CancellationToken token)
    {
        var pageNumber = state.Page + 1; // MudTable's page index is zero-based
        var pageSize = state.PageSize;
        var orderBy = state.SortLabel ?? "Name";

        rowsPerPage = pageSize; // Ensure this is up-to-date

        var response = await itemzService.__GET_Orphan_Itemzs_Collection__Async(pageNumber, pageSize, orderBy);

        if (response.Item1 != null && response.Item1.Any())
        {
            itemzs = response.Item1.ToList();
        }

        var paginationHeader = response.Item2;

        if (paginationHeader != null)
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

            var pagination = JsonSerializer.Deserialize<PaginationInfo>(paginationHeader, options);

            totalItemzs = pagination.totalCount;
        }

        mudTable.TotalItems = totalItemzs;

        return new TableData<GetItemzWithBasePropertiesDTO> { Items = itemzs, TotalItems = totalItemzs };
    }

    private void OnRowsPerPageChanged(int newRowsPerPage)
    {
        rowsPerPage = newRowsPerPage;
        // Explicitly save or update other state-related logic here if necessary
    }

    private class PaginationInfo
    {
        public int totalCount { get; set; }
        public int PageSize { get; set; }
        public int CurrentPage { get; set; }
        public int TotalPages { get; set; }
        public string PreviousPageLink { get; set; }
        public string NextPageLink { get; set; }
    }
}
