@page "/itemzTypeDetails/{ItemzTypeId:guid}"
@using ItemzApp.WebUI.Client.Services.Hierarchy
@using ItemzApp.WebUI.Client.Services.ItemzType
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService

<MudPaper Class="pa-4 mb-5 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h6" Align="Align.Left">ItemzType Details</MudText>
</MudPaper>

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
		<MudItem hidden="@hideValidationError" xs="12" sm="12">
			<MudPaper Class="pa-4 mb-5 mud-height-full">
				<MudText Typo="Typo.subtitle2" Color="@Color.Error">@($"Validation Errors ({errors.Length})")</MudText>
				@foreach (var error in errors)
				{
					<MudText Color="@Color.Error">@error</MudText>
				}
			</MudPaper>
		</MudItem>
		<MudItem xs="12" sm="12">
			<MudPaper Class="pa-4 mb-5">
				<MudForm Model="@singleItemzType" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" FieldChanged="formFieldChanged" >
			<MudCardContent>
						<MudText>Project GUID Id: @(ParentId != Guid.Empty ? ParentId.ToString() : "")  </MudText>
				<br />
				<MudText>ItemzType GUID Id: @ItemzTypeId.ToString()</MudText>
				<br />
				<MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!"
								@bind-Value="singleItemzType.Name"
								For="@(() => singleItemzType.Name)" />
				<MudSelect @bind-Value="singleItemzType.Status"
							For="@(() => singleItemzType.Status)"
							Required ="true"
							RequiredError="Status is required!"
							Label="Status">
					@foreach (var _stringItemzTypeStatusValue in _stringItemzTypeStatusValues)
					{
						<MudSelectItem T="string" Value="_stringItemzTypeStatusValue">@_stringItemzTypeStatusValue</MudSelectItem>
					}
				</MudSelect>
				<MudTextField T="string" Label="Description" Required="true" RequiredError="Description is required!"
					@bind-Value="singleItemzType.Description"
					For="@(() => singleItemzType.Description)" />
					</MudCardContent>
			<MudCardActions>
					<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(disableUpdateItemzTypeDetailsButton)"
								   Size="Size.Large"
								   style="gap: 10px; margin : 10px"
								OnClick="(() => HandleItemzTypeDetailsPatchSubmission())">
					<MudText>Save</MudText>
					</MudButton>
					<MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Large" style="gap: 10px; margin-left : 10px"
						OnClick="(() => goBackToItemzType())">
						<MudText>Cancel</MudText>
					</MudButton>
			</MudCardActions>
				<MudItem xs="12" sm="9" md="6" lg="6">
					<br />
						<MudExpansionPanels Elevation="10" style="margin-left : 15px">
							<MudExpansionPanel style="background-color : #FABBBB; color : red;"
											   Text="DANGER ZONE!" MaxHeight="150" Expanded="false">
							<TitleContent>
								<div class="d-flex">
									<MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Medium" class="mr-3"></MudIcon>
									<MudText Color="Color.Error"><strong>DANGER ZONE!</strong></MudText>
								</div>
							</TitleContent>
							<ChildContent>
									<MudText Typo="Typo.body1" Color="Color.Error">Deleting itemzType means loosing all it's data. This is <STRONG>IRREVERSIBLE</STRONG> operation.</MudText>
									<MudButton @onclick="OpenDeleteConfirmationDialogAsync" Variant="Variant.Filled"
										Disabled="@(disableUpdateItemzTypeDetailsButton)"
										Color="Color.Error" Size="Size.Large" style="align-items: center; margin-top : 10px">
									Delete ItemzType
								</MudButton>
							</ChildContent>
						</MudExpansionPanel>
					</MudExpansionPanels>
				</MudItem>
		</MudForm>

	</MudPaper>
	</MudItem>
	<MudItem xs="12" sm="12">
		<MudOverlay Visible="@updateItemzTypeButtonClicked" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit"> Updating ...  </MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudItem>
	<MudItem xs="12" sm="12">
		<MudOverlay Visible="@deletingItemzType" DarkBackground="true" Absolute="true">
			<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Deleting ...</MudText>
			<br />
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudOverlay>
	</MudItem>
	}
</MudGrid>
@code {
	[Parameter]
	public Guid ItemzTypeId { get; set; }


	[Inject]
	public IItemzTypeService ItemzTypeService { get; set; }
	[Inject]
	public IHierarchyService hierarchyService { get; set; }

	public Guid ParentId { get; set; }
	private bool updateItemzTypeButtonClicked = false;

	public GetItemzTypeDTO singleItemzType { get; set; } = new();
	public bool initializingPage { get; set; } = false;
	private bool deletingItemzType { get; set; } = false;
	private bool hasFormFieldChanged { get; set; } = false;

	//MudForm related fields
	bool success = true;
	bool disableUpdateItemzTypeDetailsButton = false;
	string[] errors = { };
	MudForm form;

	bool hideValidationError = true;

	string[] _stringItemzTypeStatusValues = { };

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleItemzType = await ItemzTypeService.__Single_ItemzType_By_GUID_ID__Async(ItemzTypeId);
			if (form != null)
			{
				await form.Validate();
				if (form.IsValid)
				{
					disableUpdateItemzTypeDetailsButton = false;
				}
				else
				{
					disableUpdateItemzTypeDetailsButton = true;
				}
				initializingPage = false;
				StateHasChanged();

				// EXPLANATION :: First we create string list and then just call ToArray() for producing required string array
				List<string> tempList = new List<string>();
				foreach (var _itemzTypeStatusValue in Enum.GetValues<ItemzTypeStatus>())
				{
					tempList.Add(_itemzTypeStatusValue.ToString().Trim());
				}
				_stringItemzTypeStatusValues = tempList.ToArray();

				if (singleItemzType != null)
				{
					if (singleItemzType.IsSystem)
					{
						await OpenExceptionDialogAsync("System ItemzType can not be edited!");
						disableUpdateItemzTypeDetailsButton = true;
						form.Disabled = true;
					}
				}
			}

			// EXPLANATION : At the start of initialization process we capture parent record ID.
			// Now even if user decides to Delete this Itemz Record then also we can go back to it's
			// Parent ItemzType post completing deletion operation.
			var httpResponse = await hierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ItemzTypeId);
			ParentId = httpResponse.ParentRecordId;
			StateHasChanged();
		}
	}
	public async Task HandleItemzTypeDetailsPatchSubmission()
	{
		updateItemzTypeButtonClicked = true;
		try
		{
			if (hasFormFieldChanged)
			{
				var updateItemzTypeDTO = new UpdateItemzTypeDTO();
				updateItemzTypeDTO.Name = singleItemzType.Name;
				updateItemzTypeDTO.Status = singleItemzType.Status;
				updateItemzTypeDTO.Description = singleItemzType.Description;
				var updatedResult = await ItemzTypeService.__PUT_Update_ItemzType_By_GUID_ID__Async(ItemzTypeId, updateItemzTypeDTO);
				Thread.Sleep(800);
			}
		}
		catch (Exception ex)
		{
			updateItemzTypeButtonClicked = false;
			await OpenExceptionDialogAsync("Problem Updating ItemzType Details : " + ex.Message);
			return;
		}
		goBackToItemzType();
	}

	private async Task formFieldChanged()
	{
		hasFormFieldChanged = true;
		if (form != null)
		{
			await form.Validate();
			if (form.IsValid)
			{
				disableUpdateItemzTypeDetailsButton = false;
				if (singleItemzType != null)
				{
					if (singleItemzType.IsSystem)
					{
						disableUpdateItemzTypeDetailsButton = true;
						StateHasChanged();
					}
				}
			}
			else
			{
				disableUpdateItemzTypeDetailsButton = true;
			}
		}
	}

	public async Task deleteItemzType()
	{
		await ItemzTypeService.__DELETE_ItemzType_By_GUID_ID__Async(ItemzTypeId);
		NavManager.NavigateTo($"/project/{ParentId.ToString()}");
	}
	private async Task OpenDeleteConfirmationDialogAsync()
	{
		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogref = await DialogService.ShowAsync<ItemzTypeDeletionConfirmDialog>("CONFIRM", options);
		var dialogresult = await dialogref.Result;
		if (!(dialogresult!.Canceled))
		{
			deletingItemzType = true;
			StateHasChanged();
			await deleteItemzType();
			Thread.Sleep(200);
		}
	}

	private async Task OpenExceptionDialogAsync(string exceptionMessage)
	{
		var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
		var dialogPara = new DialogParameters();
		dialogPara.Add("exceptionMessage", exceptionMessage);
		var dialogref = await DialogService.ShowAsync<ItemzTypeExceptionDialog>("CONFIRM", dialogPara, options);
		// var dialogresult = await dialogref.Result;
	}

	public void goBackToItemzType()
	{
		NavManager.NavigateTo($"/itemztype/{ItemzTypeId.ToString()}");
	}

}
