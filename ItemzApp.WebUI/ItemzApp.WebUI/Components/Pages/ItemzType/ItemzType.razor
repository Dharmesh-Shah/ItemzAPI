@page "/itemztype/{ItemzTypeId:guid}"
@using ItemzApp.WebUI.Client.Services.Hierarchy
@using ItemzApp.WebUI.Client.Services.ItemzType
@using ItemzApp.WebUI.Client.Services.ItemzTypeItemzsService
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Client.SharedModels.BetweenPagesAndComponent
@using ItemzApp.WebUI.Components.Pages.Breadcrums
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService

@if (BreadcrumsParameter != null)
{
	<ItemzBreadcrums produceBreadcrums="BreadcrumsParameter" />
}

<MudPaper Class="pa-4 mb-5 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h6" Align="Align.Left">ItemzType</MudText>
</MudPaper>


<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
 		<MudItem xs="12" sm="12">
			<MudPaper Class="pa-4 mb-5">
			<MudCard style="background-color : #FABBBB;" >
				<MudCardContent>
					<MudItem Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
						<MudText Typo="Typo.h5" Align="Align.Left"><strong>@singleItemzType.Name </strong></MudText>
						<MudSpacer />
						<MudButton OnClick="async _ => await editItemzTypeDetails(ItemzTypeId.ToString())" Variant="Variant.Filled" Disabled="singleItemzType.IsSystem" Size="Size.Medium" Color="Color.Success"> Edit ItemzType </MudButton>
						<MudButton OnClick="goBackToProject" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Warning" style="gap: 10px; margin-left : 10px"> Go Back </MudButton>
					</MudItem>
					<MudDivider Style="color: darkgray background-color: white; border-width: 2px; border-color: black; height: 2px; " />
					<br />
					<MudText><strong>ID          : </strong> @singleItemzType.Id.ToString()</MudText>
					<MudText><strong>Status      : </strong> @singleItemzType.Status</MudText>
					<MudText><strong>Description : </strong> @singleItemzType.Description</MudText>
				</MudCardContent>
			</MudCard>
			</MudPaper>
		</MudItem>
		<br />
 		<MudItem xs="12" sm="12">
			<MudPaper Class="pa-4 mb-5 align-start d-flex" Style="width: auto" Outlined="false">
				<MudText Typo="Typo.h6" Align="Align.Left">Itemz</MudText>
				<MudSpacer />
				<MudButton @onclick="async _ => await createNewItemz(ItemzTypeId.ToString())" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Create Itemz </MudButton>
			</MudPaper>
			<MudText Class="pa-3 mb-5">Total number of Itemz in the ItemzType : @AllItemzForItemzType.Count() </MudText>
			<MudDataGrid Items="@AllItemzForItemzType" 
						Filterable="true" 
						SortMode="@SortMode.None" 
						Groupable="false" 
						Striped="true" 
						FixedHeader="true" 
						HeaderClass="background-color: red;">
				<Columns>
					<PropertyColumn Property="x => x.RecordId" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					<PropertyColumn Property="x => x.Name" />
					<PropertyColumn Property="x => x.NumberOfChildNodes" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
 					<TemplateColumn CellClass="d-flex justify-left" >
						<CellTemplate>
							<MudButton Size="@Size.Large"
								Variant="@Variant.Filled" Color="@Color.Success" 
								OnClick="_ => openItemz(context.Item.RecordId.ToString())"> Open </MudButton>
						</CellTemplate>
					</TemplateColumn>
				</Columns>
			</MudDataGrid>
 		</MudItem>
	}
</MudGrid>
@code {
	[Parameter]
	public Guid ItemzTypeId { get; set; }


	[Inject]
	public IItemzTypeService itemzTypeService { get; set; }
	[Inject]
	public IItemzTypeItemzsService itemzTypeItemzsService { get; set; }
	[Inject]
	public IHierarchyService HierarchyService { get; set; }

	private Guid ParentId { get; set; }
	public GetItemzTypeDTO singleItemzType { get; set; } = new();
	private List<HierarchyIdRecordDetailsDTO> AllItemzForItemzType { get; set; } = new List<HierarchyIdRecordDetailsDTO>();
	// private List<NestedHierarchyIdRecordDetailsDTO> AllParentHierarchy { get; set; } = new List<NestedHierarchyIdRecordDetailsDTO>();
	private ParameterForItemzBreadcrums BreadcrumsParameter;

	public bool initializingPage { get; set; } = true;

	// protected override async Task OnInitializedAsync()
	// {
		
	// }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleItemzType = await itemzTypeService.__Single_ItemzType_By_GUID_ID__Async(ItemzTypeId);
			if (singleItemzType != null)
			{
				BreadcrumsParameter = new ParameterForItemzBreadcrums();
				BreadcrumsParameter.Id = singleItemzType.Id;
				BreadcrumsParameter.Name = singleItemzType.Name;
				BreadcrumsParameter.RecordType = "itemztype"; // TODO :: USE CONSTANT
			}
			//var returnedItemzList = await itemzTypeItemzsService.__GET_Itemzs_By_ItemzType__Async(ItemzTypeId,1,25,"Name");
			var returnedItemzList = await HierarchyService.__Get_Immediate_Children_Hierarchy_By_GUID__Async(ItemzTypeId);

			if (returnedItemzList != null)
			{
				AllItemzForItemzType = returnedItemzList.ToList();
			}

			initializingPage = false;

			// EXPLANATION : At the start of initialization process we capture parent record ID.
			// Now even if user decides to Delete this Itemz Record then also we can go back to it's
			// Parent ItemzType post completing deletion operation.

			var httpResponse = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ItemzTypeId);
			ParentId = httpResponse.ParentRecordId;

			// var returnedParentHierarchyList = await HierarchyService.__Get_All_Parents_Hierarchy_By_GUID__Async(ItemzTypeId);

			// if (returnedParentHierarchyList != null)
			// {
			// 	AllParentHierarchy = returnedParentHierarchyList.ToList();
			// }
			
			// var matchingProjectRecord = FindRecordUsingLambda(AllParentHierarchy, recordType: "Project", level: 1); // TODO :: USE CONSTANTS INSTEAD OF HARD CODED TEXT.

			// if (matchingProjectRecord != null)
			// {
			// 	ParentId = matchingProjectRecord.RecordId;
			// }

			StateHasChanged();
			//StateHasChanged();
		}
	}


	public async Task openItemz(string Id)
	{
		NavManager.NavigateTo($"/itemz/{Id}");
	}

	public async Task createNewItemz(string itemzTypeId)
	{
		NavManager.NavigateTo($"/CreateItemz/{itemzTypeId}");
	}

	public async Task editItemzTypeDetails(string id)
	{
		NavManager.NavigateTo($"/itemzTypeDetails/{id}");
	}


	public void goBackToProject()
	{
		NavManager.NavigateTo($"/project/{ParentId.ToString()}");
	}

	// #region Finding_Record_In_Parent_Hierarchy_Nodes

	// // TODO :: Finding_Record_In_Parent_Hierarchy_Nodes is a common method used by 
	// // many different Razor Pages to find parent records returned by Hierarchy Data
	// // we should try and create a helper class with statuc methods to allow it 
	// // to be reused easily by different components and pages. 

	// public NestedHierarchyIdRecordDetailsDTO? FindRecordUsingLambda(List<NestedHierarchyIdRecordDetailsDTO> hierarchy, string recordType, int level)
	// {
	// 	return hierarchy
	// 		.SelectMany(parent => GetAllRecords(parent))
	// 		.FirstOrDefault(record => record.RecordType == recordType && record.Level == level);
	// }

	// private IEnumerable<NestedHierarchyIdRecordDetailsDTO> GetAllRecords(NestedHierarchyIdRecordDetailsDTO parent)
	// {
	// 	yield return parent;
	// 	if (parent.Children != null)
	// 	{
	// 		foreach (var child in parent.Children.SelectMany(GetAllRecords))
	// 		{
	// 			yield return child;
	// 		}
	// 	}
	// }
	// #endregion
}
