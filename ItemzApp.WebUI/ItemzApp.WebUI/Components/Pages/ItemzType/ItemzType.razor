@page "/itemztype/{ItemzTypeId:guid}"
@using ItemzApp.WebUI.Client.Services.Hierarchy
@using ItemzApp.WebUI.Client.Services.Itemz
@using ItemzApp.WebUI.Client.Services.ItemzType
@using ItemzApp.WebUI.Client.Services.ItemzTypeItemzsService
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Client.SharedModels.BetweenPagesAndComponent
@using ItemzApp.WebUI.Components.Pages.Breadcrums
@using ItemzApp.WebUI.Components.Pages.Common
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService

@if (BreadcrumsParameter != null)
{
	<ItemzBreadcrums produceBreadcrums="BreadcrumsParameter" />
}

<MudPaper Class="pa-4 mb-5 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h6" Align="Align.Left">ItemzType</MudText>
</MudPaper>

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
 		<MudItem xs="12" sm="12">
			<MudPaper Class="pa-4 mb-5">
			<MudCard style="background-color : #FABBBB;" >
				<MudCardContent>
					<MudItem Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
						<MudText Typo="Typo.h5" Align="Align.Left"><strong>@singleItemzType.Name </strong></MudText>
						<MudSpacer />
						<MudButton OnClick="async _ => await editItemzTypeDetails(ItemzTypeId.ToString())" Variant="Variant.Filled" Disabled="singleItemzType.IsSystem" Size="Size.Medium" Color="Color.Success"> Edit ItemzType </MudButton>
						<MudButton OnClick="goBackToProject" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Warning" style="gap: 10px; margin-left : 10px"> Go Back </MudButton>
					</MudItem>
					<MudDivider Style="color: darkgray background-color: white; border-width: 2px; border-color: black; height: 2px; " />
					<br />
					<MudStack Row="true" Spacing="2">
						<MudText><strong>ID          : </strong></MudText>
						<CopyableText TextToCopy="@singleItemzType.Id.ToString()" />
					</MudStack>
					<MudText><strong>Status      : </strong> @singleItemzType.Status</MudText>
					<MudText><strong>Description : </strong> @singleItemzType.Description</MudText>
				</MudCardContent>
			</MudCard>
			</MudPaper>
		</MudItem>
 		<MudItem xs="12" sm="12">
			<MudPaper Class="pa-4 mb-5 align-start d-flex" Style="width: auto" Outlined="false">
				<MudText Typo="Typo.h6" Align="Align.Left">@((MarkupString)("Itemz &nbsp;&nbsp;"))</MudText>
				<MudChip T="string" Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" Color="Color.Primary"> @AllItemzForItemzType.Count().ToString()</MudChip>
				<MudSpacer />
				<MudButton @onclick="async _ => await createNewItemz(ItemzTypeId.ToString())" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Create Itemz </MudButton>
			</MudPaper>
			<MudDataGrid Items="@AllItemzForItemzType" 
						Filterable="true" 
						SortMode="@SortMode.None" 
						Groupable="false" 
						Striped="true" 
						FixedHeader="true" 
						HeaderClass="background-color: red;">
				<Columns>
					<PropertyColumn Property="x => x.RecordId" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					<PropertyColumn Property="x => x.Name" />
					<PropertyColumn Property="x => x.NumberOfChildNodes" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					<TemplateColumn Title="Action">
						<CellTemplate>
							<div style="display: flex; justify-content: left; align-items: center; gap: 10px;">
							<MudButton Size="@Size.Medium"
								Variant="@Variant.Filled" Color="@Color.Success" 
								OnClick="_ => openItemz(context.Item.RecordId.ToString())"> Open </MudButton>
							</div>
						</CellTemplate>
					</TemplateColumn>
					<TemplateColumn Title="Move Up or Down">
						<CellTemplate>
							<div style="display: flex; justify-content: left; align-items: center; gap: 10px;">
								<MudButton Size="@Size.Small"
										   Disabled="@(AllItemzForItemzType.IndexOf(context.Item) == 0)"
										   Color="Color.Success" Variant="@Variant.Filled"
										   OnClick="async _ => await MoveUpAsync(context.Item.RecordId.ToString())">Up</MudButton>
								<MudButton Size="@Size.Small"
										   Disabled="@(AllItemzForItemzType.IndexOf(context.Item) == AllItemzForItemzType.Count - 1)"
										   Color="Color.Success" Variant="@Variant.Filled"
										   OnClick="async _ => await MoveDownAsync(context.Item.RecordId.ToString())">Down</MudButton>
							</div>
						</CellTemplate>
					</TemplateColumn>
				</Columns>
			</MudDataGrid>
 		</MudItem>
	}
</MudGrid>
@if (_showOverlay)
{
	<MudPaper Height="calc(100vh - 100px);" Width="100%">
		<MudOverlay Visible="@_showOverlay" DarkBackground="true" Absolute="true">
			<MudContainer Class="d-flex flex-column justify-center align-center" Style="height: 100%;">
			@* <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Moving ... </MudText>
			<br /> *@
 			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudContainer>
		</MudOverlay>
	</MudPaper>
}

@code {
	[Parameter]
	public Guid ItemzTypeId { get; set; }

	[Inject]
	public IItemzService itemzService { get; set; }
	[Inject]
	public IItemzTypeService itemzTypeService { get; set; }
	[Inject]
	public IItemzTypeItemzsService itemzTypeItemzsService { get; set; }
	[Inject]
	public IHierarchyService HierarchyService { get; set; }

	private Guid ParentId { get; set; }
	public GetItemzTypeDTO singleItemzType { get; set; } = new();
	private List<HierarchyIdRecordDetailsDTO> AllItemzForItemzType { get; set; } = new List<HierarchyIdRecordDetailsDTO>();
	// private List<NestedHierarchyIdRecordDetailsDTO> AllParentHierarchy { get; set; } = new List<NestedHierarchyIdRecordDetailsDTO>();
	private ParameterForItemzBreadcrums BreadcrumsParameter;

	public bool initializingPage { get; set; } = true;
	public bool _showOverlay { get; set; } = false;
	// protected override async Task OnInitializedAsync()
	// {

	// }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleItemzType = await itemzTypeService.__Single_ItemzType_By_GUID_ID__Async(ItemzTypeId);
			if (singleItemzType != null)
			{
				BreadcrumsParameter = new ParameterForItemzBreadcrums();
				BreadcrumsParameter.Id = singleItemzType.Id;
				BreadcrumsParameter.Name = singleItemzType.Name;
				BreadcrumsParameter.RecordType = "itemztype"; // TODO :: USE CONSTANT
			}
			//var returnedItemzList = await itemzTypeItemzsService.__GET_Itemzs_By_ItemzType__Async(ItemzTypeId,1,25,"Name");
			var returnedItemzList = await HierarchyService.__Get_Immediate_Children_Hierarchy_By_GUID__Async(ItemzTypeId);

			if (returnedItemzList != null)
			{
				AllItemzForItemzType = returnedItemzList.ToList();
			}

			initializingPage = false;

			// EXPLANATION : At the start of initialization process we capture parent record ID.
			// Now even if user decides to Delete this Itemz Record then also we can go back to it's
			// Parent ItemzType post completing deletion operation.

			var httpResponse = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ItemzTypeId);
			ParentId = httpResponse.ParentRecordId;

			// var returnedParentHierarchyList = await HierarchyService.__Get_All_Parents_Hierarchy_By_GUID__Async(ItemzTypeId);

			// if (returnedParentHierarchyList != null)
			// {
			// 	AllParentHierarchy = returnedParentHierarchyList.ToList();
			// }

			// var matchingProjectRecord = FindRecordUsingLambda(AllParentHierarchy, recordType: "Project", level: 1); // TODO :: USE CONSTANTS INSTEAD OF HARD CODED TEXT.

			// if (matchingProjectRecord != null)
			// {
			// 	ParentId = matchingProjectRecord.RecordId;
			// }

			StateHasChanged();
			//StateHasChanged();
		}
	}


	public async Task openItemz(string Id)
	{
		NavManager.NavigateTo($"/itemz/{Id}");
	}

	public async Task createNewItemz(string itemzTypeId)
	{
		NavManager.NavigateTo($"/CreateItemz/{itemzTypeId}");
	}

	public async Task editItemzTypeDetails(string id)
	{
		NavManager.NavigateTo($"/itemzTypeDetails/{id}");
	}


	public void goBackToProject()
	{
		NavManager.NavigateTo($"/project/{ParentId.ToString()}");
	}


	#region MOVE_Up_and_Down
	private async Task MoveUpAsync(string currentId)
	{
		var _totalRecordsInList = AllItemzForItemzType.Count();

		var currentIndex = AllItemzForItemzType.FindIndex(x => x.RecordId.ToString() == currentId);

		try
		{

			// EXPLANATION :: // 0,1,2,3,4,5 SO IF GAP HAS TWO POSSIBLE SPACES ABOVE CURRENT RECORD
			// Here the lowest currentIndex number has to be 2 and so we can move  2 between 0 & 1,
			// 3 between 1 & 2, 4 in between 2 & 3, so forth.
			_showOverlay = true;
			StateHasChanged();
			if (currentIndex > 1)
			{
				await itemzService.__POST_Move_Itemz_Between_Existing_Itemz__Async(
					movingItemzId: AllItemzForItemzType[currentIndex].RecordId
					, firstItemzId: AllItemzForItemzType[currentIndex - 2].RecordId
					, secondItemzId: AllItemzForItemzType[currentIndex - 1].RecordId
				);
			}

			// EXPLANATION :: // 0,1,2,3,4,5 SO IF GAP HAS ONLY ONE ITEMZ ABOVE CURRENT LIST.
			// Here the currentIndex number will have to be 1 and so we can move  1 at position 0,
			// which is the top position.

			else if (currentIndex == 1)
			{
				await itemzService.__POST_Move_Itemz__Async(
					movingItemzId: AllItemzForItemzType[currentIndex].RecordId
					, targetId: ItemzTypeId
					, atBottomOfChildNodes: false
				);
			}
		}
		catch (Exception ex)
		{
			await DialogService.ShowMessageBox("ERROR", markupMessage: new
					MarkupString($"<p style=\"color: red; \">{ex.Message}</p>"), yesText: "OK");
			return;
		}
		finally
		{
			_showOverlay = false;
			StateHasChanged();
		}

		var previousIndex = currentIndex - 1;

		if (currentIndex > 0 && previousIndex >= 0)
		{
			var temp = AllItemzForItemzType[currentIndex];
			AllItemzForItemzType[currentIndex] = AllItemzForItemzType[previousIndex];
			AllItemzForItemzType[previousIndex] = temp;
		}
	}

	private async Task MoveDownAsync(string currentId)
	{

		var _totalRecordsInList = AllItemzForItemzType.Count();

		var currentIndex = AllItemzForItemzType.FindIndex(x => x.RecordId.ToString() == currentId);

		try
		{
			_showOverlay = true;
			StateHasChanged();
			// EXPLANATION :: 0,1,2,3,4 - Count 5  SO IF GAP HAS TWO POSSIBLE SPACES BELOW CURRENT RECORD.
			// Here the hieghest currentIndex number has to be 2 and so we can move  2 between 3 & 4,
			// 1 between 2 & 3, 0 in between 1 & 2, so forth.
			// Lets say currentIndex is 3 then (3 + 5 < 5) becomes false and so it will skip over if condition

			if (currentIndex + 2 < _totalRecordsInList)
			{
				await itemzService.__POST_Move_Itemz_Between_Existing_Itemz__Async(
					movingItemzId: AllItemzForItemzType[currentIndex].RecordId
					, firstItemzId: AllItemzForItemzType[currentIndex + 1].RecordId
					, secondItemzId: AllItemzForItemzType[currentIndex + 2].RecordId
				);
			}
			// EXPLANATION 0,1,2,3,4 - Count 5 SO 3 IS THE ONLY VALUE THAT RETURNS TRUE IN THIS CASE.
			// 3 + 2 = 5 AND SO IF CONDITION EVALUATES TO TRUE.
			// if currentIndex is 3 then it will move it to bottom of the list at position 4.

			else if (currentIndex + 2 == _totalRecordsInList)
			{
				await itemzService.__POST_Move_Itemz__Async(
					movingItemzId: AllItemzForItemzType[currentIndex].RecordId
					, targetId: ItemzTypeId
					, atBottomOfChildNodes: true
				);
			}
		}
		catch (Exception ex)
		{
			await DialogService.ShowMessageBox("ERROR", markupMessage: new
					MarkupString($"<p style=\"color: red; \">{ex.Message}</p>"), yesText: "OK");
			return;
		}
		finally
		{
			_showOverlay = false;
			StateHasChanged();
		}

		var nextIndex = currentIndex + 1;

		if (currentIndex < AllItemzForItemzType.Count - 1 && nextIndex >= 0)
		{
			var temp = AllItemzForItemzType[currentIndex];
			AllItemzForItemzType[currentIndex] = AllItemzForItemzType[nextIndex];
			AllItemzForItemzType[nextIndex] = temp;
		}
	}
	#endregion

	// #region Finding_Record_In_Parent_Hierarchy_Nodes

	// // TODO :: Finding_Record_In_Parent_Hierarchy_Nodes is a common method used by 
	// // many different Razor Pages to find parent records returned by Hierarchy Data
	// // we should try and create a helper class with statuc methods to allow it 
	// // to be reused easily by different components and pages. 

	// public NestedHierarchyIdRecordDetailsDTO? FindRecordUsingLambda(List<NestedHierarchyIdRecordDetailsDTO> hierarchy, string recordType, int level)
	// {
	// 	return hierarchy
	// 		.SelectMany(parent => GetAllRecords(parent))
	// 		.FirstOrDefault(record => record.RecordType == recordType && record.Level == level);
	// }

	// private IEnumerable<NestedHierarchyIdRecordDetailsDTO> GetAllRecords(NestedHierarchyIdRecordDetailsDTO parent)
	// {
	// 	yield return parent;
	// 	if (parent.Children != null)
	// 	{
	// 		foreach (var child in parent.Children.SelectMany(GetAllRecords))
	// 		{
	// 			yield return child;
	// 		}
	// 	}
	// }
	// #endregion
}
