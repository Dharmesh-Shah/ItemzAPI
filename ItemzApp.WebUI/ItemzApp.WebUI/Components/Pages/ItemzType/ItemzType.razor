@page "/itemztype/{ItemzTypeId:guid}"
@using ItemzApp.WebUI.Client.Services.Hierarchy
@using ItemzApp.WebUI.Client.Services.ItemzType
@using ItemzApp.WebUI.Client.Services.ItemzTypeItemzsService
@using ItemzApp.WebUI.Client.SharedModels
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject IDialogService DialogService

<MudBreadcrumbs Items="_localBreadcrumbs" MaxItems="5"  >
	<SeparatorTemplate>
		<MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight" Size="Size.Medium" />
	</SeparatorTemplate>
	<ItemTemplate Context="item">
		<div style="display: flex; align-items: center;"> @* // TO SHOW MUDICON AND MUDLINK TOGETHER ON THE SAME LINE! *@
			<MudIcon Icon=@item.Icon Color="Color.Primary" ></MudIcon> 
			<MudTooltip Text="@item.Text">
				<MudLink Href="@item.Href" OnClick="@(e => ForceReload(e, item.Href))" Typo="Typo.h6" Style="margin-left: 8px;">@(item.Text.Length > 20 ? item.Text.Substring(0, 20) + "..." : item.Text)</MudLink>
			</MudTooltip>
		</div>
	</ItemTemplate>
</MudBreadcrumbs>
@* 	@foreach (var breadcrumb in _localBreadcrumbs)
    {
        <MudBreadcrumbItem Href="@breadcrumb.Href" Icon="@breadcrumb.Icon">
            @breadcrumb.Text
        </MudBreadcrumbItem>
    }
</MudBreadcrumbs> *@

<h1>ItemzType</h1>
<br />

<MudGrid>
	@if (initializingPage)
	{
		<MudPaper Height="calc(100vh - 100px);" Width="100%">
			<MudOverlay Visible="@initializingPage" DarkBackground="true" Absolute="true">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Inherit">Loading ...</MudText>
				<br />
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			</MudOverlay>
		</MudPaper>
	}
	else
	{
 		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4">
			<MudCard style="background-color : #FABBBB;" >
				<MudCardContent>
					<MudItem Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
						<MudText Typo="Typo.h5" Align="Align.Left"><strong>@singleItemzType.Name </strong></MudText>
						<MudSpacer />
						<MudButton OnClick="async _ => await editItemzTypeDetails(ItemzTypeId.ToString())" Variant="Variant.Filled" Disabled="singleItemzType.IsSystem" Size="Size.Medium" Color="Color.Success"> Edit ItemzType </MudButton>
							<MudButton OnClick="goBackToProject" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Warning" style="gap: 10px; margin-left : 10px"> Go Back </MudButton>
						</MudItem>
					<br />
					<MudDivider Style="color : black"   />
					<br />
					<MudText><strong>ItemzType ID          : </strong> @singleItemzType.Id.ToString()</MudText>
					<MudText><strong>ItemzType Status      : </strong> @singleItemzType.Status</MudText>
					<MudText><strong>ItemzType Description : </strong> @singleItemzType.Description</MudText>
				</MudCardContent>
			</MudCard>
			</MudPaper>
		</MudItem>
		<br />
 		<MudItem xs="12" sm="8">
			<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
				<MudText Typo="Typo.h4" Align="Align.Left">Itemz</MudText>
				<MudSpacer />
				<MudButton @onclick="async _ => await createNewItemz(ItemzTypeId.ToString())" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Create Itemz </MudButton>
			</MudPaper>
			<MudText>Total number of Itemz in the ItemzType : @AllItemzForItemzType.Count() </MudText>
			<MudDataGrid Items="@AllItemzForItemzType" 
						Filterable="true" 
						SortMode="@SortMode.None" 
						Groupable="false" 
						Striped="true" 
						FixedHeader="true" 
						HeaderClass="background-color: red;">
				<Columns>
					<PropertyColumn Property="x => x.RecordId" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
					<PropertyColumn Property="x => x.Name" />
					<PropertyColumn Property="x => x.NumberOfChildNodes" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
 					<TemplateColumn CellClass="d-flex justify-left" >
						<CellTemplate>
							<MudButton Size="@Size.Large"
								Variant="@Variant.Filled" Color="@Color.Success" 
								OnClick="_ => openItemz(context.Item.RecordId.ToString())"> Open </MudButton>
						</CellTemplate>
					</TemplateColumn>
				</Columns>
			</MudDataGrid>
 		</MudItem>
	}
</MudGrid>
@code {
	[Parameter]
	public Guid ItemzTypeId { get; set; }
	[Parameter]
	public Guid ParentId { get; set; }

	[Inject]
	public IItemzTypeService itemzTypeService { get; set; }
	[Inject]
	public IItemzTypeItemzsService itemzTypeItemzsService { get; set; }
	[Inject]
	public IHierarchyService HierarchyService { get; set; }


	public GetItemzTypeDTO singleItemzType { get; set; } = new();
	private List<HierarchyIdRecordDetailsDTO> AllItemzForItemzType { get; set; } = new List<HierarchyIdRecordDetailsDTO>();
	private List<NestedHierarchyIdRecordDetailsDTO> AllParentHierarchy { get; set; } = new List<NestedHierarchyIdRecordDetailsDTO>();

	public bool initializingPage { get; set; } = true;

	private List<BreadcrumbItem> _localBreadcrumbs = new List<BreadcrumbItem>();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			initializingPage = true;
			StateHasChanged();
			//Thread.Sleep(300);
			singleItemzType = await itemzTypeService.__Single_ItemzType_By_GUID_ID__Async(ItemzTypeId);

			//var returnedItemzList = await itemzTypeItemzsService.__GET_Itemzs_By_ItemzType__Async(ItemzTypeId,1,25,"Name");
			var returnedItemzList = await HierarchyService.__Get_Immediate_Children_Hierarchy_By_GUID__Async(ItemzTypeId);

			if (returnedItemzList != null)
			{
				AllItemzForItemzType = returnedItemzList.ToList();
			}

			initializingPage = false;

			// EXPLANATION : At the start of initialization process we capture parent record ID.
			// Now even if user decides to Delete this Itemz Record then also we can go back to it's
			// Parent ItemzType post completing deletion operation.

			// var httpResponse = await HierarchyService.__Get_Hierarchy_Record_Details_By_GUID__Async(ItemzTypeId);
			// ParentId = httpResponse.ParentRecordId;

			var returnedParentHierarchyList = await HierarchyService.__Get_All_Parents_Hierarchy_By_GUID__Async(ItemzTypeId);

			if (returnedParentHierarchyList != null)
			{
				AllParentHierarchy = returnedParentHierarchyList.ToList();
			}

			foreach (var tempParentHierarchyRecord in AllParentHierarchy)
			{
				var _tempHref = GetHREFForBreadcrumbs( 
					breadcrumRecordType: tempParentHierarchyRecord.RecordType, 
					breadcrumRecordId: tempParentHierarchyRecord.RecordId);
				var _tempIcon = GetIconForBreadcrumbs(tempParentHierarchyRecord.RecordType);

				_localBreadcrumbs.Add(new BreadcrumbItem

					(text: (
								(tempParentHierarchyRecord.Name.Length < 31 ) 
								? tempParentHierarchyRecord.Name 
								: tempParentHierarchyRecord.Name.Substring(0, 30)
							)
						, href: _tempHref
						, icon: _tempIcon)
					);
				if (tempParentHierarchyRecord.Children.Count > 0)
				{
					AddChildBreadcrumbs(tempParentHierarchyRecord.Children);
				}
			}

			// EXPLANATION :: Add self to breadcrums

			_localBreadcrumbs.Add(new BreadcrumbItem
						(
							text: ((singleItemzType.Name.Length < 31)
										? singleItemzType.Name
										: singleItemzType.Name.Substring(0, 30))
							, href: GetHREFForBreadcrumbs(
										breadcrumRecordType: "itemztype", // TODO :: USE CONSTANTS
										breadcrumRecordId: singleItemzType.Id)
							, icon: GetIconForBreadcrumbs("itemztype") // TODO :: USE CONSTANTS
						)
				);

			var matchingProjectRecord = FindRecordUsingLambda(AllParentHierarchy, recordType: "Project", level: 1); // TODO :: USE CONSTANTS INSTEAD OF HARD CODED TEXT.

			if (matchingProjectRecord != null)
			{
				ParentId = matchingProjectRecord.RecordId;
			}

			StateHasChanged();
			//StateHasChanged();
		}
	}

	#region Breadcrumbs_helper


	private void ForceReload(MouseEventArgs e, string uri)
	{
		if (!e.CtrlKey && !string.IsNullOrEmpty(uri))
		{
			NavManager.NavigateTo(uri, forceLoad: true);
		}
	}

	private void AddChildBreadcrumbs(List<NestedHierarchyIdRecordDetailsDTO> tempChildHierarchyRecords)
	{
		foreach (var _tempChildHierarchyRecord in tempChildHierarchyRecords)
		{
			var _tempHref = GetHREFForBreadcrumbs(
							breadcrumRecordType: _tempChildHierarchyRecord.RecordType,
							breadcrumRecordId: _tempChildHierarchyRecord.RecordId);
			var _tempIcon = GetIconForBreadcrumbs(_tempChildHierarchyRecord.RecordType);

			_localBreadcrumbs.Add(new BreadcrumbItem

				(text: (
								(_tempChildHierarchyRecord.Name.Length < 31)
								? _tempChildHierarchyRecord.Name
								: _tempChildHierarchyRecord.Name.Substring(0, 30)
						)
					, href: _tempHref
					, icon: _tempIcon)
				);
			if (_tempChildHierarchyRecord.Children.Count > 0)
			{
				AddChildBreadcrumbs(_tempChildHierarchyRecord.Children);
			}
		}
	}


	private string GetHREFForBreadcrumbs(string breadcrumRecordType, Guid breadcrumRecordId)
	{ 
		string _tempUrl = 
			breadcrumRecordType.ToLower() switch
			{ "project" => "http://localhost:5166/project/"
				, "itemztype" => "http://localhost:5166/itemzType/"
				, "itemz" => "http://localhost:5166/itemz/"
				, _ => string.Empty 
			};

		_tempUrl = _tempUrl + breadcrumRecordId.ToString();
		return _tempUrl;
	}

	private string GetIconForBreadcrumbs(string breadcrumRecordType)
	{
		return
			breadcrumRecordType.ToLower() switch
			{
				"project" => Icons.Material.Filled.LocalFlorist
				,
				"itemztype" => Icons.Material.Filled.MenuBook
				,
				"itemz" => Icons.Material.Filled.Stream
				,
				_ => Icons.Material.Filled.Cancel
			};
					
	}

	#endregion

	public async Task openItemz(string Id)
	{
		NavManager.NavigateTo($"/itemz/{Id}");
	}

	public async Task createNewItemz(string itemzTypeId)
	{
		NavManager.NavigateTo($"/CreateItemz/{itemzTypeId}");
	}

	public async Task editItemzTypeDetails(string id)
	{
		NavManager.NavigateTo($"/itemzTypeDetails/{id}");
	}


	public void goBackToProject()
	{
		NavManager.NavigateTo($"/project/{ParentId.ToString()}");
	}

	#region Finding_Record_In_Parent_Hierarchy_Nodes

	// TODO :: Finding_Record_In_Parent_Hierarchy_Nodes is a common method used by 
	// many different Razor Pages to find parent records returned by Hierarchy Data
	// we should try and create a helper class with statuc methods to allow it 
	// to be reused easily by different components and pages. 

	public NestedHierarchyIdRecordDetailsDTO? FindRecordUsingLambda(List<NestedHierarchyIdRecordDetailsDTO> hierarchy, string recordType, int level)
	{
		return hierarchy
			.SelectMany(parent => GetAllRecords(parent))
			.FirstOrDefault(record => record.RecordType == recordType && record.Level == level);
	}

	private IEnumerable<NestedHierarchyIdRecordDetailsDTO> GetAllRecords(NestedHierarchyIdRecordDetailsDTO parent)
	{
		yield return parent;
		if (parent.Children != null)
		{
			foreach (var child in parent.Children.SelectMany(GetAllRecords))
			{
				yield return child;
			}
		}
	}
	#endregion
}
