@page "/moveitemz"
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Client.Services.Itemz
@using ItemzApp.WebUI.Client.Services.ItemzType
@using ItemzApp.WebUI.Components.Pages.Common

@inject IDialogService DialogService

<MudPaper Class="pa-3 mb-3 align-start d-flex" Style="width: auto " Outlined="false">
	<MudStack Row="true" Spacing="3">
	<MudIcon Icon="@Icons.Material.Filled.ConnectingAirports" Size="Size.Large" />
		<MudText Typo="Typo.h5" Align="Align.Left">Move Itemz Under </MudText>
		<MudSpacer /> 
		<MudText Class="mt-3" Typo="Typo.caption"> Move Itemz and it's Sub-Itemz tree structure as child under selected target ItemzType / Itemz </MudText>
	</MudStack>
</MudPaper>

<MudItem xs="12" Class="d-flex align-items-center justify-center mud-width-full mud-height-full py-3">
	<MudPaper Class="d-flex align-items-center justify-center mud-width-full mud-height-full py-3" style="padding: 16px;">
		<div class="d-flex flex-column align-items-center justify-center w-100 h-100">
			<MudStack Row="true" Spacing="2">
				<MudTooltip Text="Step 1 is to select Source Itemz that should be moved">
					<MudChip T="string" Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" Color="Color.Success"> STEP 1 </MudChip>
				</MudTooltip>
				<MudButton @onclick="async _ => await selectSourceItemz()" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Select Source Itemz </MudButton>
			</MudStack>
			@if (sourceItemz != null && sourceItemz.Id != Guid.Empty)
			{
			<MudStack Row="false" Spacing="2">
			<MudCard style="background-color : #FABBBB; margin: 16px;" Class="w-100">
				<MudCardContent Class="d-flex flex-wrap">
					<div>
						<MudText Typo="Typo.h6" Align="Align.Left"> Source Itemz Details </MudText> 
						<MudDivider></MudDivider>
						<MudText><strong>Name        : </strong> @sourceItemz.Name </MudText>
						<MudStack Row="true" Spacing="2">
						<MudText><strong>ID          : </strong></MudText>
						<CopyableText TextToCopy="@sourceItemz.Id.ToString()" />
						</MudStack>
						<MudText><strong>Status      : </strong> @sourceItemz.Status</MudText>
						<MudText><strong>Priority    : </strong> @sourceItemz.Priority</MudText>
						<MudText><strong>Severity    : </strong> @sourceItemz.Severity</MudText>
					</div>
				</MudCardContent>
			</MudCard>
			</MudStack>
			}
		</div>
    </MudPaper>
</MudItem>
@if (sourceItemz != null && sourceItemz.Id != Guid.Empty)
{
	<MudItem xs="12" Class="d-flex align-items-center justify-center mud-width-full mud-height-full py-3">
	<MudPaper Class="d-flex align-items-center justify-center mud-width-full mud-height-full py-3" style="padding: 16px;">
		<div class="d-flex flex-column align-items-center justify-center w-100 h-100">
			<MudStack Row="true" Spacing="2">
				<MudTooltip Text="Step 2 is to select Target Itemz OR ItemzType to move under">
					<MudChip T="string" Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" Color="Color.Success"> STEP 2 </MudChip>
				</MudTooltip>
				<MudButton @onclick="async _ => await selectTargetItemz()" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Select Target Itemz </MudButton>
				<MudButton @onclick="async _ => await selectTargetItemzType()" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Select Target ItemzType </MudButton>
			</MudStack>
			@if (targetItemz != null && targetItemz.Id != Guid.Empty )
			{
				<MudStack Row="false" Spacing="2">
				<MudCard style="background-color : #FABBBB; margin: 16px;" Class="w-100">
				<MudCardContent>
					<MudText Typo="Typo.h6" Align="Align.Left"> Target Itemz Details </MudText> 
					<MudDivider></MudDivider>
					<MudText><strong>Name        : </strong> @targetItemz.Name </MudText>
					<MudStack Row="true" Spacing="2">
					<MudText><strong>ID          : </strong></MudText>
					<CopyableText TextToCopy="@targetItemz.Id.ToString()" />
					</MudStack>
					<MudText><strong>Status      : </strong> @targetItemz.Status</MudText>
					<MudText><strong>Priority    : </strong> @targetItemz.Priority</MudText>
					<MudText><strong>Severity    : </strong> @targetItemz.Severity</MudText>
				</MudCardContent>
				</MudCard>
				</MudStack>
			}
			else if (targetItemzType != null && targetItemzType.Id != Guid.Empty)
			{
				<MudStack Row="false" Spacing="2">
				<MudCard style="background-color : #FABBBB; margin: 16px;" Class="w-100">
				<MudCardContent>
					<MudText Typo="Typo.h6" Align="Align.Left"> Target ItemzType Details </MudText>
					<MudDivider></MudDivider>
					<MudText><strong>Name        : </strong> @targetItemzType.Name </MudText>
					<MudStack Row="true" Spacing="2">
					<MudText><strong>ID          : </strong></MudText>
					<CopyableText TextToCopy="@targetItemzType.Id.ToString()" />
					</MudStack>
					<MudText><strong>Status      : </strong> @targetItemzType.Status</MudText>
				</MudCardContent>
				</MudCard>
				</MudStack>
			}
			@if ((targetItemz != null && targetItemz.Id != Guid.Empty) ||
				(targetItemzType != null && targetItemzType.Id != Guid.Empty))
			{
				<MudStack Row="true" Spacing="2">
					<MudTooltip Text="Step 3 is to decide Top or Bottom place under Target child Itemz list">
						<MudChip T="string" Class="mt-2" Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" Color="Color.Success"> STEP 3 </MudChip>
					</MudTooltip>
				<MudRadioGroup @bind-Value="radioAtBottomOfChildList">
					<MudRadio Value="false" Color="Color.Primary" Dense="false">At The Top of Child List</MudRadio>
					<MudRadio Value="true" Color="Color.Primary" Dense="false">At The Bottom of Child List</MudRadio>
				</MudRadioGroup>
				</MudStack>
			}
		</div>
    </MudPaper>
</MudItem>
}

@if (sourceItemz != null && sourceItemz.Id != Guid.Empty)
{
	@if ((targetItemz != null && targetItemz.Id != Guid.Empty) ||
			(targetItemzType != null && targetItemzType.Id != Guid.Empty))
	{
		<MudPaper Class="pa-3 mb-3 align-end d-flex" Style="width: auto " Outlined="false">
		<div class="d-flex flex-column align-items-center justify-center w-100 h-100">
		<MudStack Row="true" Spacing="2">
			<MudTooltip Text="Step 4 is to Perform OR Cancel the move">
				<MudChip T="string" Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" Color="Color.Success"> STEP 4 </MudChip>
			</MudTooltip>
			<MudButton @onclick="async _ => await performItemzMove()" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Primary"> Move Source Itemz to selected Target </MudButton>
			<MudButton @onclick="async _ => await performCleanUpActivity()" Variant="Variant.Filled" Size="Size.Medium" Color="Color.Warning"> Cancel / Restart Move </MudButton>
		</MudStack>
		</div>
		</MudPaper>
	}
}
@if (movingItemzOverlay)
{
	<MudPaper Height="calc(100vh - 100px);" Width="100%">
		<MudOverlay Visible="@movingItemzOverlay" DarkBackground="true" Absolute="true">
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
			<MudText Typo="Typo.h6" Align="Align.End" Color="Color.Inherit">Moving Itemz and its children...</MudText>
		</MudOverlay>
	</MudPaper>
}
@code {

	[Inject]
	public IItemzService ItemzService { get; set; }
	[Inject]
	public IItemzTypeService ItemzTypeService { get; set; }

	public GetItemzDTO sourceItemz { get; set; } = new();
	public GetItemzDTO targetItemz { get; set; } = new();
	public GetItemzTypeDTO targetItemzType { get; set; } = new();
	public bool radioAtBottomOfChildList { get; set; } = true;
	public bool movingItemzOverlay { get; set; } = false;

	public async Task selectSourceItemz()
	{
		var parameters = new DialogParameters();
		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
		var dialog = DialogService.Show<SelectSourceItemzDialog>("Enter Source Itemz Record ID", parameters, options);
		var result = await dialog.Result;
		if (!result.Canceled && result.Data is Guid inputSourceItemzId)
		{
			// Verify recordId exists in your repository
			try
			{
				var foundSourceItemz = await ItemzService.__Single_Itemz_By_GUID_ID__Async(inputSourceItemzId);
				if (foundSourceItemz != null)
				{
					sourceItemz = foundSourceItemz;
				}
				else
				{
					await DialogService.ShowMessageBox("ERROR", markupMessage: new 
						MarkupString($"<p style=\"color: red; \">Could not find Source Itemz with ID {inputSourceItemzId} in repository.</p>"), yesText: "OK");
					sourceItemz = new();
				}
			}
			catch
			{
				await DialogService.ShowMessageBox("ERROR", markupMessage: new 
					MarkupString($"<p style=\"color: red; \">EXCEPTION :: Could not find Source Itemz with ID {inputSourceItemzId} in repository.</p>"), yesText: "OK");
				sourceItemz = new(); // CLEAR OUT SELF.
			}
		}
	}

	public async Task selectTargetItemz()
	{
		var parameters = new DialogParameters();
		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
		var dialog = DialogService.Show<SelectTargetItemzDialog>("Enter Target Itemz Record ID", parameters, options);
		var result = await dialog.Result;
		if (!result.Canceled && result.Data is Guid inputTargetItemzId)
		{

			if (sourceItemz.Id == inputTargetItemzId)
			{
				await DialogService.ShowMessageBox("ERROR", markupMessage: new MarkupString($"<p style=\"color: red; \">Source and Target Itemz Id can not be same.</p>"), yesText: "OK");
				targetItemz = new();
				return;
			}

			// Verify recordId exists in your repository
			try
			{
				var foundTargetItemz = await ItemzService.__Single_Itemz_By_GUID_ID__Async(inputTargetItemzId);
				if (foundTargetItemz != null)
				{
					targetItemz = foundTargetItemz;
					targetItemzType = new(); // CLEAR OUT THE OTHER ONE
				}
				else
				{
					await DialogService.ShowMessageBox("ERROR", markupMessage: new 
							MarkupString($"<p style=\"color: red; \">Could not find Target Itemz with ID {inputTargetItemzId} in repository.</p>"), yesText: "OK");
					targetItemz = new(); // CLEAR OUT SELF.
				}
			}
			catch (Exception ex)
			{
				await DialogService.ShowMessageBox("ERROR", markupMessage: new 
						MarkupString($"<p style=\"color: red; \">EXCEPTION :: Could not find Target Itemz with ID {inputTargetItemzId} in repository.</p>"), yesText: "OK");
				targetItemz = new(); // CLEAR OUT SELF.
			}
		}
	}

	public async Task selectTargetItemzType()
	{
		var parameters = new DialogParameters();
		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
		var dialog = DialogService.Show<SelectTargetItemzTypeDialog>("Enter Target ItemzType Record ID", parameters, options);
		var result = await dialog.Result;
		if (!result.Canceled && result.Data is Guid inputTargetItemzTypeId)
		{

			if (sourceItemz.Id == inputTargetItemzTypeId)
			{
				await DialogService.ShowMessageBox("ERROR", markupMessage: new 
						MarkupString($"<p style=\"color: red; \">Source and Target Id can not be same.</p>"), yesText: "OK");
				targetItemzType = new();
				return;
			}

			// Verify recordId exists in your repository
			try
			{
				var foundTargetItemzType = await ItemzTypeService.__Single_ItemzType_By_GUID_ID__Async(inputTargetItemzTypeId);
				if (foundTargetItemzType != null)
				{
					targetItemzType = foundTargetItemzType;
					targetItemz = new(); // CLEAR OUT THE OTHER ONE
				}
				else
				{
					await DialogService.ShowMessageBox("ERROR", markupMessage: new 
							MarkupString($"<p style=\"color: red; \">Could not find Target ItemzType with ID {inputTargetItemzTypeId} in repository.</p>"), yesText: "OK");
					targetItemzType = new(); // CLEAR OUT SELF
				}
			}
			catch (Exception ex)
			{
				await DialogService.ShowMessageBox("ERROR", markupMessage: new
						MarkupString($"<p style=\"color: red; \">EXCEPTION :: Could not find Target ItemzType with ID {inputTargetItemzTypeId} in repository.</p>"), yesText: "OK");
				targetItemzType = new(); // CLEAR OUT SELF
			}
		}
	}

	public async Task performItemzMove()
	{
		if (sourceItemz == null || sourceItemz.Id == Guid.Empty)
		{
			await DialogService.ShowMessageBox("ERROR", markupMessage: new
						MarkupString($"<p style=\"color: red; \">Source Itemz should be selected first!</p>"), yesText: "OK");
			return;
		}

		if ((targetItemz == null || targetItemz.Id == Guid.Empty) && 
				(targetItemzType == null || targetItemzType.Id == Guid.Empty))
		{
			await DialogService.ShowMessageBox("ERROR", markupMessage: new
						MarkupString($"<p style=\"color: red; \">Both, Target Itemz and TargetItemzType are empty! Please select one of them as target.</p>"), yesText: "OK");
			return;
		}

		try
		{
			if ((targetItemz != null || targetItemz.Id != Guid.Empty) &&
					(targetItemzType == null || targetItemzType.Id == Guid.Empty))
			{
				movingItemzOverlay = true;
				Thread.Sleep(300);
				await ItemzService.__POST_Move_Itemz__Async(sourceItemz.Id, targetItemz.Id, radioAtBottomOfChildList);
				movingItemzOverlay = false;
				await DialogService.ShowMessageBox("SUCCESS", markupMessage: new
					MarkupString($"<p style=\"color: blue; \">Move Source Itemz to Target Itemz Completed Successfully!</p>"), yesText: "OK");
				await performCleanUpActivity();
				return;
			}

			if ((targetItemz == null || targetItemz.Id == Guid.Empty) &&
					(targetItemzType != null || targetItemzType.Id != Guid.Empty))
			{
				movingItemzOverlay = true;
				Thread.Sleep(300);
				await ItemzService.__POST_Move_Itemz__Async(sourceItemz.Id, targetItemzType.Id, radioAtBottomOfChildList);
				movingItemzOverlay = false;
				await DialogService.ShowMessageBox("SUCCESS", markupMessage: new
					MarkupString($"<p style=\"color: blue; \">Move Source Itemz to Target Itemz Type Completed Successfully!</p>"), yesText: "OK");
				await performCleanUpActivity();
				return;
			}
		}
		catch (Exception ex)
		{
			movingItemzOverlay = false;
			await DialogService.ShowMessageBox("ERROR", markupMessage: new
					MarkupString($"<p style=\"color: red; \">Could not move Itemz : {ex.Message}</p>"), yesText: "OK");
		}
	}

	public async Task performCleanUpActivity()
	{
		// Perform clean-up activity
		sourceItemz = new();
		targetItemz = new();
		targetItemzType = new();
		radioAtBottomOfChildList = true;
		movingItemzOverlay = false;
	}

	// private async Task<(bool isEligible, string checkEligibilityErrorMessage)> CheckTargetEligibility(GetItemzDTO checkTargetItemz)
	// {
	// 	string checkEligibilityErrorMessage = string.Empty;
	// 	if (sourceItemz.Id == checkTargetItemz.Id)
	// 	{
	// 		checkEligibilityErrorMessage = $"<p style=\"color: red; \">Source and Target Itemz Id can not be same.</p>";
	// 		return (false, checkEligibilityErrorMessage) ;
	// 	}

	// 	return (true, checkEligibilityErrorMessage);
	// }
  
}
