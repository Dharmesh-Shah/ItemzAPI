@using System.Globalization
@using ItemzApp.WebUI.Client.SharedModels
@using ItemzApp.WebUI.Client.Services.ItemzChangeHistory

<h5>Change History Component</h5>
<br />
<MudPaper Class="pa-4 align-start d-flex" Style="width: auto" Outlined="false">
	<MudText Typo="Typo.h5" Align="Align.Left"> Itemz Change History </MudText>
</MudPaper>
<MudDataGrid Items="@itemzChangeHistoryList"
			 Filterable="true"
			 SortMode="@SortMode.None"
			 Groupable="false"
			 Striped="true"
			 FixedHeader="true"
			 HeaderClass="background-color: red;">
	<Columns>
		<PropertyColumn Property="x => x.CreatedDate" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " >
			<CellTemplate> @context.Item.CreatedDate.ToString("dd MMM yyyy HH:mm:ss", CultureInfo.CurrentCulture)</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.OldValues" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " />
		<PropertyColumn Property="x => x.NewValues" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " Resizable="true" />
		<PropertyColumn Property="x => x.ChangeEvent" Filterable="false" CellStyle="max-width: 100px; overflow-x: visible; white-space: normal; " Resizable="true"/>
	</Columns>
</MudDataGrid>


@code {
	[Parameter]
	public Guid ItemzId { get; set; }

	[Inject]
	public IItemzChangeHistoryService itemzChangeHistoryService { get; set; }


	private ICollection<GetItemzChangeHistoryDTO> ItemzChangeHistoryRecords { get; set; } = new List<GetItemzChangeHistoryDTO>();
	private List<GetItemzChangeHistoryDTO> itemzChangeHistoryList = new List<GetItemzChangeHistoryDTO>();

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("Loading ItemzChangeHistoryRecords...");
		var ItemzChangeHistoryRecords = await itemzChangeHistoryService.__GET_ItemzChangeHistory_By_GUID_ItemzID__Async(ItemzId);
		Console.WriteLine($"Loaded {ItemzChangeHistoryRecords.Count} records.");
		itemzChangeHistoryList = ItemzChangeHistoryRecords.ToList();
		StateHasChanged();
	}
	public async Task openItemz()
	{
	}

}
